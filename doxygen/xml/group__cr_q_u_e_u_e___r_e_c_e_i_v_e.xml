<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__cr_q_u_e_u_e___r_e_c_e_i_v_e" kind="group">
    <compoundname>crQUEUE_RECEIVE</compoundname>
    <title>crQUEUE_RECEIVE</title>
    <briefdescription>
<para>croutine. </para>    </briefdescription>
    <detaileddescription>
<para>h <preformatted>
  crQUEUE_RECEIVE(
                     xCoRoutineHandle xHandle,
                     xQueueHandle pxQueue,
                     void *pvBuffer,
                     portTickType xTicksToWait,
                     portBASE_TYPE *pxResult
                 )</preformatted></para><para>The macro&apos;s crQUEUE_SEND() and crQUEUE_RECEIVE() are the co-routine equivalent to the xQueueSend() and xQueueReceive() functions used by tasks.</para><para>crQUEUE_SEND and crQUEUE_RECEIVE can only be used from a co-routine whereas xQueueSend() and xQueueReceive() can only be used from tasks.</para><para>crQUEUE_RECEIVE can only be called from the co-routine function itself - not from within a function called by the co-routine function. This is because co-routines do not maintain their own stack.</para><para>See the co-routine section of the WEB documentation for information on passing data between tasks and co-routines and between ISR&apos;s and co-routines.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xHandle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the calling co-routine. This is the xHandle parameter of the co-routine function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the queue from which the data will be received. The handle is obtained as the return value when the queue is created using the xQueueCreate() API function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer into which the received item is to be copied. The number of bytes of each queued item is specified when the queue is created. This number of bytes is copied into pvBuffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xTickToDelay</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of ticks that the co-routine should block to wait for data to become available from the queue, should data not be available immediately. The actual amount of time this equates to is defined by configTICK_RATE_HZ (set in <ref refid="_free_r_t_o_s_config_8h_source" kindref="compound">FreeRTOSConfig.h</ref>). The constant portTICK_RATE_MS can be used to convert ticks to milliseconds (see the crQUEUE_SEND example).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxResult</parametername>
</parameternamelist>
<parameterdescription>
<para>The variable pointed to by pxResult will be set to pdPASS if data was successfully retrieved from the queue, otherwise it will be set to an error code as defined within ProjDefs.h.</para></parameterdescription>
</parameteritem>
</parameterlist>
Example usage: <preformatted>
A co-routine receives the number of an LED to flash from a queue.  It
blocks on the queue until the number is received.
 static void prvCoRoutineFlashWorkTask( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
 {
Variables in co-routines must be declared static if they must maintain value across a blocking call.
 static portBASE_TYPE xResult;
 static unsigned portBASE_TYPE uxLEDToFlash;</preformatted></para><para><preformatted>All co-routines must start with a call to crSTART().
    crSTART( xHandle );</preformatted></para><para><preformatted>    for( ;; )
    {
Wait for data to become available on the queue.
        crQUEUE_RECEIVE( xHandle, xCoRoutineQueue, &amp;uxLEDToFlash, portMAX_DELAY, &amp;xResult );</preformatted></para><para><preformatted>        if( xResult == pdPASS )
        {
We received the LED to flash - flash it!
            vParTestToggleLED( uxLEDToFlash );
        }
    }</preformatted></para><para><preformatted>    crEND();
 }</preformatted> </para>    </detaileddescription>
  </compounddef>
</doxygen>
