<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="i2c_8c" kind="file">
    <compoundname>i2c.c</compoundname>
    <includes refid="libmaple_8h" local="yes">libmaple.h</includes>
    <includes refid="rcc_8h" local="yes">rcc.h</includes>
    <includes refid="gpio_8h" local="yes">gpio.h</includes>
    <includes refid="nvic_8h" local="yes">nvic.h</includes>
    <includes refid="i2c_8h" local="yes">i2c.h</includes>
    <includes local="yes">string.h</includes>
    <includes refid="systick_8h" local="yes">systick.h</includes>
    <incdepgraph>
      <node id="254">
        <label>nvic.h</label>
        <link refid="nvic_8h"/>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
      </node>
      <node id="252">
        <label>rcc.h</label>
        <link refid="rcc_8h"/>
        <childnode refid="248" relation="include">
        </childnode>
      </node>
      <node id="246">
        <label>libmaple/i2c.c</label>
        <link refid="i2c.c"/>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
      </node>
      <node id="255">
        <label>i2c.h</label>
        <link refid="i2c_8h"/>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
      </node>
      <node id="249">
        <label>stm32.h</label>
        <link refid="stm32_8h"/>
      </node>
      <node id="248">
        <label>libmaple_types.h</label>
        <link refid="libmaple__types_8h"/>
      </node>
      <node id="247">
        <label>libmaple.h</label>
        <link refid="libmaple_8h"/>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
      </node>
      <node id="256">
        <label>string.h</label>
      </node>
      <node id="257">
        <label>systick.h</label>
        <link refid="systick_8h"/>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
      </node>
      <node id="253">
        <label>gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
      </node>
      <node id="251">
        <label>delay.h</label>
        <link refid="delay_8h"/>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
      </node>
      <node id="250">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="248" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structcrumb" prot="public">crumb</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="i2c_8c_1a95c0e98636d3aabf9847b5f63eed7e75" prot="public" static="no">
        <name>I2C_CRUMB</name>
        <param><defname>event</defname></param>
        <param><defname>arg0</defname></param>
        <param><defname>arg1</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="102" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="i2c_8c_1ab5f0572ec4591ff6f7763fe13cdbe364" prot="public" static="no">
        <name>I2C_CLK</name>
        <initializer>(<ref refid="stm32_8h_1a79d8b0164de9c4437da78024b0ed94cb" kindref="member">STM32_PCLK1</ref>/1000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="396"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no">
        <name>@0</name>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55baaffcf84f619305bfe0690c690a969408" prot="public">
          <name>IRQ_ENTRY</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55baac4bb1ff14108b301631bfb02415c044" prot="public">
          <name>TXE_ONLY</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55bacc7bd908a5ef1d7ca4d3c628db991746" prot="public">
          <name>TXE_BTF</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55ba9b08eba1a827a04904ffbe21f745514c" prot="public">
          <name>STOP_SENT</name>
          <initializer> 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55bab2f0cd22b1963becef8b91d29d567fe8" prot="public">
          <name>TEST</name>
          <initializer> 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55badd1dfa88b2e1da46c5a75772ae35be05" prot="public">
          <name>RX_ADDR_START</name>
          <initializer> 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55ba95cd18a59c84c17f70be2100eabcfede" prot="public">
          <name>RX_ADDR_STOP</name>
          <initializer> 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55ba2d10f2256160f28403f9d53324bc3805" prot="public">
          <name>RXNE_ONLY</name>
          <initializer> 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55ba8fe2b5ca1f543c24ea0c5fdc065232e8" prot="public">
          <name>RXNE_SENDING</name>
          <initializer> 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55bad4ec0d9b2f73f8a49dec91f1c6eca777" prot="public">
          <name>RXNE_START_SENT</name>
          <initializer> 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55ba463263c2a5376da32b8773d5f8f5a6e1" prot="public">
          <name>RXNE_STOP_SENT</name>
          <initializer> 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55ba1facf5c5309c993ef6c28af83b881f75" prot="public">
          <name>RXNE_DONE</name>
          <initializer> 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="i2c_8c_1a06fc87d81c62e9abb8790b6e5713c55ba52f8573fa1bd87b05f3ac4fd4672d5a7" prot="public">
          <name>ERROR_ENTRY</name>
          <initializer> 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="111" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="111" bodyend="125"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="i2c_8c_1ab48a914801b5a9fd7296559b68c109a2" prot="public" static="yes" mutable="no">
        <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref></type>
        <definition>i2c_dev i2c_dev1</definition>
        <argsstring></argsstring>
        <name>i2c_dev1</name>
        <initializer> {
    .regs         = <ref refid="i2c_8h_1acd72dbffb1738ca87c838545c4eb85a3" kindref="member">I2C1_BASE</ref>,
    .gpio_port    = &amp;gpiob,
    .sda_pin      = 7,
    .scl_pin      = 6,
    .clk_id       = RCC_I2C1,
    .ev_nvic_line = <ref refid="nvic_8h_1a89e3d57340a69fbdef83f12661543d83a8e44c6f62f38fde44083f2856eb65685" kindref="member">NVIC_I2C1_EV</ref>,
    .er_nvic_line = <ref refid="nvic_8h_1a89e3d57340a69fbdef83f12661543d83ad044e2f91f863d1b5666f470b54e476b" kindref="member">NVIC_I2C1_ER</ref>,
    .state        = <ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa5792a96b3ac295e48ea5c9cd12e3b57c" kindref="member">I2C_STATE_DISABLED</ref>
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="51" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2c_8c_1aec89802fb408c222366cbe7dab906b09" prot="public" static="no" mutable="no">
        <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *const</type>
        <definition>i2c_dev* const I2C1</definition>
        <argsstring></argsstring>
        <name>I2C1</name>
        <initializer> &amp;i2c_dev1</initializer>
        <briefdescription>
<para>I2C1 device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="53" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2c_8c_1a22da9bb01cc78477f776967cb2c68320" prot="public" static="yes" mutable="no">
        <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref></type>
        <definition>i2c_dev i2c_dev2</definition>
        <argsstring></argsstring>
        <name>i2c_dev2</name>
        <initializer> {
    .regs         = <ref refid="i2c_8h_1a04bda70f25c795fb79f163b633ad4a5d" kindref="member">I2C2_BASE</ref>,
    .gpio_port    = &amp;gpiob,
    .sda_pin      = 11,
    .scl_pin      = 10,
    .clk_id       = RCC_I2C2,
    .ev_nvic_line = <ref refid="nvic_8h_1a89e3d57340a69fbdef83f12661543d83a36e8fddd9d7e47460b4377d3f16953bd" kindref="member">NVIC_I2C2_EV</ref>,
    .er_nvic_line = <ref refid="nvic_8h_1a89e3d57340a69fbdef83f12661543d83a957d976bf8e2b3f0a374b3b5f41fa0ca" kindref="member">NVIC_I2C2_ER</ref>,
    .state        = <ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa5792a96b3ac295e48ea5c9cd12e3b57c" kindref="member">I2C_STATE_DISABLED</ref>
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="64" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="i2c_8c_1a6d5a7765624c32671f73c79a73e778cc" prot="public" static="no" mutable="no">
        <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *const</type>
        <definition>i2c_dev* const I2C2</definition>
        <argsstring></argsstring>
        <name>I2C2</name>
        <initializer> &amp;i2c_dev2</initializer>
        <briefdescription>
<para>I2C2 device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="66" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="i2c_8c_1a64f21519a98b697cf0231e981e166f0d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32</type>
        <definition>static int32 wait_for_state_change</definition>
        <argsstring>(i2c_dev *dev, i2c_state state, uint32 timeout)</argsstring>
        <name>wait_for_state_change</name>
        <param>
          <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190a" kindref="member">i2c_state</ref></type>
          <declname>state</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Wait for an I2C event, or time out in case of error. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C_state state to wait for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout, in milliseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if target state is reached, a negative value on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="70" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="541" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a9ae42af8b2f0675b2baa29d87b54dc77" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_send_slave_addr</definition>
        <argsstring>(i2c_dev *dev, uint32 addr, uint32 rw)</argsstring>
        <name>i2c_send_slave_addr</name>
        <param>
          <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>rw</declname>
        </param>
        <briefdescription>
<para>Fill data register with slave address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rw</parametername>
</parameternamelist>
<parameterdescription>
<para>Read/write bit </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="78" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a68e68cf4f615932db321c74f2cad380c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_irq_handler</definition>
        <argsstring>(i2c_dev *dev)</argsstring>
        <name>i2c_irq_handler</name>
        <param>
          <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>IRQ handler for I2C master. </para>        </briefdescription>
        <detaileddescription>
<para>Handles transmission/reception. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="131" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="131" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a00b4f90dbc5de6cb9c936db1060bc8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __irq_i2c1_ev</definition>
        <argsstring>(void)</argsstring>
        <name>__irq_i2c1_ev</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="291" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="291" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a4f748eb4f74880eefb4976260a623c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __irq_i2c2_ev</definition>
        <argsstring>(void)</argsstring>
        <name>__irq_i2c2_ev</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="295" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="295" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1ada97bf4d9f4da7af62e81bd7127034dd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void i2c_irq_error_handler</definition>
        <argsstring>(i2c_dev *dev)</argsstring>
        <name>i2c_irq_error_handler</name>
        <param>
          <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Interrupt handler for I2C error conditions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Side Effects:</title><para>Aborts any pending I2C transactions </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="304" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="304" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a3d8b1ee8e4de432509752fb5cbfdd524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __irq_i2c1_er</definition>
        <argsstring>(void)</argsstring>
        <name>__irq_i2c1_er</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="320" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="320" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a604ffbd93a379727148dedc7157bca49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __irq_i2c2_er</definition>
        <argsstring>(void)</argsstring>
        <name>__irq_i2c2_er</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="324" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="324" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1aab3886f4f42b3c5aa303311db6cba2ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void i2c_bus_reset</definition>
        <argsstring>(const i2c_dev *dev)</argsstring>
        <name>i2c_bus_reset</name>
        <param>
          <type>const <ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Reset an I2C bus. </para>        </briefdescription>
        <detaileddescription>
<para>Reset is accomplished by clocking out pulses until any hung slaves release SDA and SCL, then generating a START condition, then a STOP condition.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="337" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="337" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1af8cfdd992921cde40e1602a9b34e25ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void i2c_init</definition>
        <argsstring>(i2c_dev *dev)</argsstring>
        <name>i2c_init</name>
        <param>
          <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Initialize an I2C device and reset its registers to their default values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device to initialize. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="378" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a452bf35cbe145bbdf2def959891952f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void i2c_master_enable</definition>
        <argsstring>(i2c_dev *dev, uint32 flags)</argsstring>
        <name>i2c_master_enable</name>
        <param>
          <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Initialize an I2C device as bus master. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device to enable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitwise or of the following I2C options: I2C_FAST_MODE: 400 khz operation, I2C_DUTY_16_9: 16/9 Tlow/Thigh duty cycle (only applicable for fast mode), I2C_BUS_RESET: Reset the bus and clock out any hung slaves on initialization, I2C_10BIT_ADDRESSING: Enable 10-bit addressing, I2C_REMAP: Remap I2C1 to SCL/PB8 SDA/PB9. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="395" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="395" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1aafcba989e09effa08b3b8414326b52ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32</type>
        <definition>int32 i2c_master_xfer</definition>
        <argsstring>(i2c_dev *dev, i2c_msg *msgs, uint16 num, uint32 timeout)</argsstring>
        <name>i2c_master_xfer</name>
        <param>
          <type><ref refid="structi2c__dev" kindref="compound">i2c_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type><ref refid="structi2c__msg" kindref="compound">i2c_msg</ref> *</type>
          <declname>msgs</declname>
        </param>
        <param>
          <type>uint16</type>
          <declname>num</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Process an i2c transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Transactions are composed of one or more <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref>&apos;s, and may be read or write tranfers. Multiple <ref refid="structi2c__msg" kindref="compound">i2c_msg</ref>&apos;s will generate a repeated start in between messages.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msgs</parametername>
</parameternamelist>
<parameterdescription>
<para>Messages to send/receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of messages to send/receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus idle timeout in milliseconds before aborting the transfer. 0 denotes no timeout. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, I2C_ERROR_PROTOCOL if there was a protocol error, I2C_ERROR_TIMEOUT if the transfer timed out. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" line="510" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/i2c.c" bodystart="507" bodyend="531"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Inter-Integrated Circuit (I2C) support. </para>    </briefdescription>
    <detaileddescription>
<para>Currently, only master mode is supported. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010<sp/>Perry<sp/>Hung.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libmaple_8h" kindref="compound" tooltip="General include file for libmaple.">libmaple.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rcc_8h" kindref="compound" tooltip="reset and clock control definitions and prototypes">rcc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gpio_8h" kindref="compound" tooltip="General purpose I/O (GPIO) and Alternate Function I/O (AFIO) prototypes, defines, and inlined access ...">gpio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="nvic_8h" kindref="compound" tooltip="Nested vector interrupt controller support.">nvic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="i2c_8h" kindref="compound" tooltip="Inter-Integrated Circuit (I2C) peripheral support.">i2c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="systick_8h" kindref="compound" tooltip="Various system timer definitions.">systick.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>i2c_dev1<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="i2c_8h_1acd72dbffb1738ca87c838545c4eb85a3" kindref="member" tooltip="I2C1 register map base pointer.">I2C1_BASE</ref>,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>.gpio_port<sp/><sp/><sp/><sp/>=<sp/>&amp;gpiob,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>.sda_pin<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>.scl_pin<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structgpio__dev_1ad85f2e5040b063de36ac41d8c6ebce4e" kindref="member" tooltip="RCC clock information.">clk_id</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RCC_I2C1,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>.ev_nvic_line<sp/>=<sp/><ref refid="nvic_8h_1a89e3d57340a69fbdef83f12661543d83a8e44c6f62f38fde44083f2856eb65685" kindref="member" tooltip="I2C1 event.">NVIC_I2C1_EV</ref>,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>.er_nvic_line<sp/>=<sp/><ref refid="nvic_8h_1a89e3d57340a69fbdef83f12661543d83ad044e2f91f863d1b5666f470b54e476b" kindref="member" tooltip="I2C1 error.">NVIC_I2C1_ER</ref>,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>.state<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa5792a96b3ac295e48ea5c9cd12e3b57c" kindref="member" tooltip="Disabled.">I2C_STATE_DISABLED</ref></highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53" refid="i2c_8h_1aec89802fb408c222366cbe7dab906b09" refkind="member"><highlight class="normal"><ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1aec89802fb408c222366cbe7dab906b09" kindref="member" tooltip="I2C1 device.">I2C1</ref><sp/>=<sp/>&amp;i2c_dev1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>i2c_dev2<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="i2c_8h_1a04bda70f25c795fb79f163b633ad4a5d" kindref="member" tooltip="I2C2 register map base pointer.">I2C2_BASE</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>.gpio_port<sp/><sp/><sp/><sp/>=<sp/>&amp;gpiob,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>.sda_pin<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>11,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>.scl_pin<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structgpio__dev_1ad85f2e5040b063de36ac41d8c6ebce4e" kindref="member" tooltip="RCC clock information.">clk_id</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RCC_I2C2,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>.ev_nvic_line<sp/>=<sp/><ref refid="nvic_8h_1a89e3d57340a69fbdef83f12661543d83a36e8fddd9d7e47460b4377d3f16953bd" kindref="member" tooltip="I2C2 event.">NVIC_I2C2_EV</ref>,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>.er_nvic_line<sp/>=<sp/><ref refid="nvic_8h_1a89e3d57340a69fbdef83f12661543d83a957d976bf8e2b3f0a374b3b5f41fa0ca" kindref="member" tooltip="I2C2 error.">NVIC_I2C2_ER</ref>,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>.state<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa5792a96b3ac295e48ea5c9cd12e3b57c" kindref="member" tooltip="Disabled.">I2C_STATE_DISABLED</ref></highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66" refid="i2c_8h_1a6d5a7765624c32671f73c79a73e778cc" refkind="member"><highlight class="normal"><ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a6d5a7765624c32671f73c79a73e778cc" kindref="member" tooltip="I2C2 device.">I2C2</ref><sp/>=<sp/>&amp;i2c_dev2;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32<sp/><ref refid="i2c_8c_1a64f21519a98b697cf0231e981e166f0d" kindref="member" tooltip="Wait for an I2C event, or time out in case of error.">wait_for_state_change</ref>(<ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190a" kindref="member" tooltip="I2C device states.">i2c_state</ref><sp/>state,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>timeout);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="i2c_8c_1a9ae42af8b2f0675b2baa29d87b54dc77" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a9ae42af8b2f0675b2baa29d87b54dc77" kindref="member" tooltip="Fill data register with slave address.">i2c_send_slave_addr</ref>(<ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev,<sp/>uint32<sp/>addr,<sp/>uint32<sp/>rw)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1a7028d38567026e86589a537dec78c63d" kindref="member" tooltip="Data register.">DR</ref><sp/>=<sp/>(addr<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>rw;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>Simple<sp/>debugging<sp/>trail.<sp/>Define<sp/>I2C_DEBUG<sp/>to<sp/>turn<sp/>on.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>I2C_DEBUG</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NR_CRUMBS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>128</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcrumb" kindref="compound">crumb</ref><sp/>crumbs[NR_CRUMBS];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32<sp/>cur_crumb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>i2c_drop_crumb(uint32<sp/>event,<sp/>uint32<sp/>arg0,<sp/>uint32<sp/>arg1)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_crumb<sp/>&lt;<sp/>NR_CRUMBS)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcrumb" kindref="compound">crumb</ref><sp/>*<ref refid="structcrumb" kindref="compound">crumb</ref><sp/>=<sp/>&amp;crumbs[cur_crumb++];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crumb-&gt;event<sp/>=<sp/>event;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crumb-&gt;arg0<sp/>=<sp/>arg0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crumb-&gt;arg1<sp/>=<sp/>arg1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_CRUMB(event,<sp/>arg0,<sp/>arg1)<sp/>i2c_drop_crumb(event,<sp/>arg0,<sp/>arg1)</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>I2C_CRUMB(event,<sp/>arg0,<sp/>arg1)</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="structcrumb" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcrumb" kindref="compound">crumb</ref><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>event;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>arg0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>arg1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>IRQ_ENTRY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>TXE_ONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>TXE_BTF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>STOP_SENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>TEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>RX_ADDR_START<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>RX_ADDR_STOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>RXNE_ONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>RXNE_SENDING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>RXNE_START_SENT<sp/><sp/><sp/><sp/><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>RXNE_STOP_SENT<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>11,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>RXNE_DONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>12,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>ERROR_ENTRY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>13,</highlight></codeline>
<codeline lineno="125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="i2c_8c_1a68e68cf4f615932db321c74f2cad380c" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a68e68cf4f615932db321c74f2cad380c" kindref="member" tooltip="IRQ handler for I2C master.">i2c_irq_handler</ref>(<ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structi2c__msg" kindref="compound" tooltip="I2C message type.">i2c_msg</ref><sp/>*msg<sp/>=<sp/>dev-&gt;<ref refid="structi2c__dev_1ad7c032f3abb09d59b6c3191c0249bfbf" kindref="member" tooltip="Messages.">msg</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>read<sp/>=<sp/>msg-&gt;<ref refid="structi2c__msg_1ae69339535712eeb396cc1e3d71340c23" kindref="member" tooltip="Bitwise OR of I2C_MSG_READ and I2C_MSG_10BIT_ADDR.">flags</ref><sp/>&amp;<sp/>I2C_MSG_READ;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>sr1<sp/>=<sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1af8809b67c1551e09349054e46bc4c237" kindref="member" tooltip="Status register 1.">SR1</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>sr2<sp/>=<sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1a0dfc48d5ca6ec155b50d1c7018df4036" kindref="member" tooltip="Status register 2.">SR2</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_CRUMB(IRQ_ENTRY,<sp/>sr1,<sp/>sr2);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reset<sp/>timeout<sp/>counter</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1a548eb25d2d6906db7b49976c85a7979d" kindref="member" tooltip="For internal use.">timestamp</ref><sp/>=<sp/><ref refid="systick_8h_1a8d9e8be23ed5bcf7ee68333180d1e8ec" kindref="member" tooltip="Returns the system uptime, in milliseconds.">systick_uptime</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>EV5:<sp/>Start<sp/>condition<sp/>sent</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sr1<sp/>&amp;<sp/>I2C_SR1_SB)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg-&gt;<ref refid="structi2c__msg_1adba24d9b7f6f5873472bfc5d70b8a207" kindref="member" tooltip="Messages transferred.">xferred</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_enable_irq(dev,<sp/>I2C_IRQ_BUFFER);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Master<sp/>receiver</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a6b816d62c3416d559973f4f2ea0820b9" kindref="member" tooltip="Enable I2C acknowledgment.">i2c_enable_ack</ref>(dev);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a9ae42af8b2f0675b2baa29d87b54dc77" kindref="member" tooltip="Fill data register with slave address.">i2c_send_slave_addr</ref>(dev,<sp/>msg-&gt;<ref refid="structi2c__msg_1a66b30535a9a11588b2eb88475940c40c" kindref="member" tooltip="Address.">addr</ref>,<sp/>read);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr1<sp/>=<sp/>sr2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>EV6:<sp/>Slave<sp/>address<sp/>sent</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sr1<sp/>&amp;<sp/>I2C_SR1_ADDR)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>event<sp/>EV6_1<sp/>for<sp/>master<sp/>receiver.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Generate<sp/>NACK<sp/>and<sp/>restart/stop<sp/>condition<sp/>after<sp/>ADDR</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>is<sp/>cleared.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg-&gt;<ref refid="structi2c__msg_1a5f0907550fa4e8455e8ab9faeaebf340" kindref="member" tooltip="Message length.">length</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a1ae827cb26f735cee3efba1897496540" kindref="member" tooltip="Disable I2C acknowledgment.">i2c_disable_ack</ref>(dev);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structi2c__dev_1ae752e1f62474bced6b88cdce32be2cc9" kindref="member" tooltip="Messages left.">msgs_left</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a001c83b552f3002bc6ff294e0a3a03e0" kindref="member" tooltip="Generate a start condition on the bus.">i2c_start_condition</ref>(dev);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(RX_ADDR_START,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a71fa06b838b8c067401ad767da3bedc2" kindref="member" tooltip="Generate a stop condition on the bus.">i2c_stop_condition</ref>(dev);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(RX_ADDR_STOP,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Master<sp/>transmitter:<sp/>write<sp/>first<sp/>byte<sp/>to<sp/>fill<sp/>shift</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>register.<sp/><sp/>We<sp/>should<sp/>get<sp/>another<sp/>TXE<sp/>interrupt</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>immediately<sp/>to<sp/>fill<sp/>DR<sp/>again.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg-&gt;<ref refid="structi2c__msg_1a5f0907550fa4e8455e8ab9faeaebf340" kindref="member" tooltip="Message length.">length</ref><sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1aaf1d8b3f161b5bffccf335e45560bc95" kindref="member" tooltip="Fill transmit register.">i2c_write</ref>(dev,<sp/>msg-&gt;<ref refid="structi2c__msg_1a33aa3bea77e6db64bfee3ee49e6213f9" kindref="member" tooltip="Data.">data</ref>[msg-&gt;<ref refid="structi2c__msg_1adba24d9b7f6f5873472bfc5d70b8a207" kindref="member" tooltip="Messages transferred.">xferred</ref>++]);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr1<sp/>=<sp/>sr2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>EV8:<sp/>Master<sp/>transmitter</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Transmit<sp/>buffer<sp/>empty,<sp/>but<sp/>we<sp/>haven&apos;t<sp/>finished<sp/>transmitting<sp/>the<sp/>last</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>byte<sp/>written.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sr1<sp/>&amp;<sp/>I2C_SR1_TXE)<sp/>&amp;&amp;<sp/>!(sr1<sp/>&amp;<sp/>I2C_SR1_BTF))<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(TXE_ONLY,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structi2c__dev_1ae752e1f62474bced6b88cdce32be2cc9" kindref="member" tooltip="Messages left.">msgs_left</ref>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1aaf1d8b3f161b5bffccf335e45560bc95" kindref="member" tooltip="Fill transmit register.">i2c_write</ref>(dev,<sp/>msg-&gt;<ref refid="structi2c__msg_1a33aa3bea77e6db64bfee3ee49e6213f9" kindref="member" tooltip="Data.">data</ref>[msg-&gt;<ref refid="structi2c__msg_1adba24d9b7f6f5873472bfc5d70b8a207" kindref="member" tooltip="Messages transferred.">xferred</ref>++]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg-&gt;<ref refid="structi2c__msg_1adba24d9b7f6f5873472bfc5d70b8a207" kindref="member" tooltip="Messages transferred.">xferred</ref><sp/>==<sp/>msg-&gt;<ref refid="structi2c__msg_1a5f0907550fa4e8455e8ab9faeaebf340" kindref="member" tooltip="Message length.">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>End<sp/>of<sp/>this<sp/>message.<sp/>Turn<sp/>off<sp/>TXE/RXNE<sp/>and<sp/>wait<sp/>for</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>BTF<sp/>to<sp/>send<sp/>repeated<sp/>start<sp/>or<sp/>stop<sp/>condition.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a2902b00e058e95b0ef5523f6bcfe6198" kindref="member" tooltip="Disable one or more I2C interrupts.">i2c_disable_irq</ref>(dev,<sp/>I2C_IRQ_BUFFER);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ae752e1f62474bced6b88cdce32be2cc9" kindref="member" tooltip="Messages left.">msgs_left</ref>--;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>should<sp/>be<sp/>impossible...</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throb();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr1<sp/>=<sp/>sr2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>EV8_2:<sp/>Master<sp/>transmitter</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Last<sp/>byte<sp/>sent,<sp/>program<sp/>repeated<sp/>start/stop</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sr1<sp/>&amp;<sp/>I2C_SR1_TXE)<sp/>&amp;&amp;<sp/>(sr1<sp/>&amp;<sp/>I2C_SR1_BTF))<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(TXE_BTF,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structi2c__dev_1ae752e1f62474bced6b88cdce32be2cc9" kindref="member" tooltip="Messages left.">msgs_left</ref>)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(TEST,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Repeated<sp/>start<sp/>insanity:<sp/>We<sp/>can&apos;t<sp/>disable<sp/>ITEVTEN<sp/>or<sp/>else<sp/>SB</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>won&apos;t<sp/>interrupt,<sp/>but<sp/>if<sp/>we<sp/>don&apos;t<sp/>disable<sp/>ITEVTEN,<sp/>BTF<sp/>will</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>continually<sp/>interrupt<sp/>us.<sp/>What<sp/>the<sp/>fuck<sp/>ST?</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a001c83b552f3002bc6ff294e0a3a03e0" kindref="member" tooltip="Generate a start condition on the bus.">i2c_start_condition</ref>(dev);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1af8809b67c1551e09349054e46bc4c237" kindref="member" tooltip="Status register 1.">SR1</ref><sp/>&amp;<sp/>I2C_SR1_SB))</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad7c032f3abb09d59b6c3191c0249bfbf" kindref="member" tooltip="Messages.">msg</ref>++;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a71fa06b838b8c067401ad767da3bedc2" kindref="member" tooltip="Generate a stop condition on the bus.">i2c_stop_condition</ref>(dev);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Turn<sp/>off<sp/>event<sp/>interrupts<sp/>to<sp/>keep<sp/>BTF<sp/>from<sp/>firing<sp/>until</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>end<sp/>of<sp/>the<sp/>stop<sp/>condition.<sp/>Why<sp/>on<sp/>earth<sp/>they<sp/>didn&apos;t</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>have<sp/>a<sp/>start/stop<sp/>condition<sp/>request<sp/>clear<sp/>BTF<sp/>is<sp/>beyond</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>me.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a2902b00e058e95b0ef5523f6bcfe6198" kindref="member" tooltip="Disable one or more I2C interrupts.">i2c_disable_irq</ref>(dev,<sp/>I2C_IRQ_EVENT);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(STOP_SENT,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad1c99c4368625947a2e98284df705d91" kindref="member" tooltip="Device state.">state</ref><sp/>=<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa29bc11ff47f471f704fab5c69974a692" kindref="member" tooltip="Done with transfer.">I2C_STATE_XFER_DONE</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sr1<sp/>=<sp/>sr2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>EV7:<sp/>Master<sp/>Receiver</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sr1<sp/>&amp;<sp/>I2C_SR1_RXNE)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(RXNE_ONLY,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg-&gt;<ref refid="structi2c__msg_1a33aa3bea77e6db64bfee3ee49e6213f9" kindref="member" tooltip="Data.">data</ref>[msg-&gt;<ref refid="structi2c__msg_1adba24d9b7f6f5873472bfc5d70b8a207" kindref="member" tooltip="Messages transferred.">xferred</ref>++]<sp/>=<sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1a7028d38567026e86589a537dec78c63d" kindref="member" tooltip="Data register.">DR</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>EV7_1:<sp/>Second<sp/>to<sp/>last<sp/>byte<sp/>in<sp/>the<sp/>reception?<sp/>Set<sp/>NACK<sp/>and<sp/>generate</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>stop/restart<sp/>condition<sp/>in<sp/>time<sp/>for<sp/>the<sp/>last<sp/>byte.<sp/>We&apos;ll<sp/>get<sp/>one<sp/>more</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>RXNE<sp/>interrupt<sp/>before<sp/>shutting<sp/>things<sp/>down.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg-&gt;<ref refid="structi2c__msg_1adba24d9b7f6f5873472bfc5d70b8a207" kindref="member" tooltip="Messages transferred.">xferred</ref><sp/>==<sp/>(msg-&gt;<ref refid="structi2c__msg_1a5f0907550fa4e8455e8ab9faeaebf340" kindref="member" tooltip="Message length.">length</ref><sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a1ae827cb26f735cee3efba1897496540" kindref="member" tooltip="Disable I2C acknowledgment.">i2c_disable_ack</ref>(dev);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structi2c__dev_1ae752e1f62474bced6b88cdce32be2cc9" kindref="member" tooltip="Messages left.">msgs_left</ref><sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a001c83b552f3002bc6ff294e0a3a03e0" kindref="member" tooltip="Generate a start condition on the bus.">i2c_start_condition</ref>(dev);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(RXNE_START_SENT,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a71fa06b838b8c067401ad767da3bedc2" kindref="member" tooltip="Generate a stop condition on the bus.">i2c_stop_condition</ref>(dev);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(RXNE_STOP_SENT,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg-&gt;<ref refid="structi2c__msg_1adba24d9b7f6f5873472bfc5d70b8a207" kindref="member" tooltip="Messages transferred.">xferred</ref><sp/>==<sp/>msg-&gt;<ref refid="structi2c__msg_1a5f0907550fa4e8455e8ab9faeaebf340" kindref="member" tooltip="Message length.">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ae752e1f62474bced6b88cdce32be2cc9" kindref="member" tooltip="Messages left.">msgs_left</ref>--;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;<ref refid="structi2c__dev_1ae752e1f62474bced6b88cdce32be2cc9" kindref="member" tooltip="Messages left.">msgs_left</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>We&apos;re<sp/>done.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_CRUMB(RXNE_DONE,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad1c99c4368625947a2e98284df705d91" kindref="member" tooltip="Device state.">state</ref><sp/>=<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa29bc11ff47f471f704fab5c69974a692" kindref="member" tooltip="Done with transfer.">I2C_STATE_XFER_DONE</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad7c032f3abb09d59b6c3191c0249bfbf" kindref="member" tooltip="Messages.">msg</ref>++;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__irq_i2c1_ev(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><ref refid="i2c_8c_1a68e68cf4f615932db321c74f2cad380c" kindref="member" tooltip="IRQ handler for I2C master.">i2c_irq_handler</ref>(&amp;i2c_dev1);</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__irq_i2c2_ev(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><ref refid="i2c_8c_1a68e68cf4f615932db321c74f2cad380c" kindref="member" tooltip="IRQ handler for I2C master.">i2c_irq_handler</ref>(&amp;i2c_dev2);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="i2c_8c_1ada97bf4d9f4da7af62e81bd7127034dd" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1ada97bf4d9f4da7af62e81bd7127034dd" kindref="member" tooltip="Interrupt handler for I2C error conditions.">i2c_irq_error_handler</ref>(<ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>I2C_CRUMB(ERROR_ENTRY,<sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1af8809b67c1551e09349054e46bc4c237" kindref="member" tooltip="Status register 1.">SR1</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1a0dfc48d5ca6ec155b50d1c7018df4036" kindref="member" tooltip="Status register 2.">SR2</ref>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1a9efc3cbcbd6d297b213a998781eb5a39" kindref="member" tooltip="Error flags, set on I2C error condition.">error_flags</ref><sp/>=<sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1a0dfc48d5ca6ec155b50d1c7018df4036" kindref="member" tooltip="Status register 2.">SR2</ref><sp/>&amp;<sp/>(I2C_SR1_BERR<sp/>|</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_SR1_ARLO<sp/>|</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_SR1_AF<sp/>|</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C_SR1_OVR);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1af8809b67c1551e09349054e46bc4c237" kindref="member" tooltip="Status register 1.">SR1</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1a0dfc48d5ca6ec155b50d1c7018df4036" kindref="member" tooltip="Status register 2.">SR2</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a71fa06b838b8c067401ad767da3bedc2" kindref="member" tooltip="Generate a stop condition on the bus.">i2c_stop_condition</ref>(dev);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a2902b00e058e95b0ef5523f6bcfe6198" kindref="member" tooltip="Disable one or more I2C interrupts.">i2c_disable_irq</ref>(dev,<sp/>I2C_IRQ_BUFFER<sp/>|<sp/>I2C_IRQ_EVENT<sp/>|<sp/><ref refid="i2c_8h_1a52a80944a72431b51fd928d904486db7" kindref="member" tooltip="Enable one or more I2C interrupts.">I2C_IRQ_ERROR</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad1c99c4368625947a2e98284df705d91" kindref="member" tooltip="Device state.">state</ref><sp/>=<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aadd0d5082a2cf148823e1b8307728b011" kindref="member" tooltip="Error occurred.">I2C_STATE_ERROR</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__irq_i2c1_er(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1ada97bf4d9f4da7af62e81bd7127034dd" kindref="member" tooltip="Interrupt handler for I2C error conditions.">i2c_irq_error_handler</ref>(&amp;i2c_dev1);</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__irq_i2c2_er(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1ada97bf4d9f4da7af62e81bd7127034dd" kindref="member" tooltip="Interrupt handler for I2C error conditions.">i2c_irq_error_handler</ref>(&amp;i2c_dev2);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="i2c_8h_1aab3886f4f42b3c5aa303311db6cba2ce" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1aab3886f4f42b3c5aa303311db6cba2ce" kindref="member" tooltip="Reset an I2C bus.">i2c_bus_reset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>both<sp/>lines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a1a8578058d9bcbf287484ec425bb9f5f" kindref="member" tooltip="SDA bit on gpio_port.">sda_pin</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_set_mode(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref>,<sp/><ref refid="gpio_8h_1a3bb60796972f15de31c709442d82c7eaa3fc0063625c7422755aac18ee4f82f44" kindref="member" tooltip="Output open-drain.">GPIO_OUTPUT_OD</ref>);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_set_mode(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a1a8578058d9bcbf287484ec425bb9f5f" kindref="member" tooltip="SDA bit on gpio_port.">sda_pin</ref>,<sp/><ref refid="gpio_8h_1a3bb60796972f15de31c709442d82c7eaa3fc0063625c7422755aac18ee4f82f44" kindref="member" tooltip="Output open-drain.">GPIO_OUTPUT_OD</ref>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Make<sp/>sure<sp/>the<sp/>bus<sp/>is<sp/>free<sp/>by<sp/>clocking<sp/>it<sp/>until<sp/>any<sp/>slaves<sp/>release<sp/>the</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>bus.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="gpio_8h_1a8aa80a01e2e617a06706518c5d754d21" kindref="member" tooltip="Determine whether or not a GPIO pin is set.">gpio_read_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a1a8578058d9bcbf287484ec425bb9f5f" kindref="member" tooltip="SDA bit on gpio_port.">sda_pin</ref>))<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>any<sp/>clock<sp/>stretching<sp/>to<sp/>finish<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="gpio_8h_1a8aa80a01e2e617a06706518c5d754d21" kindref="member" tooltip="Determine whether or not a GPIO pin is set.">gpio_read_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref>))</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="delay_8h_1ab6a09ce7e805fd3c213ba6d2d5921a59" kindref="member" tooltip="Delay the given number of microseconds.">delay_us</ref>(10);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pull<sp/>low<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="delay_8h_1ab6a09ce7e805fd3c213ba6d2d5921a59" kindref="member" tooltip="Delay the given number of microseconds.">delay_us</ref>(10);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>high<sp/>again<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="delay_8h_1ab6a09ce7e805fd3c213ba6d2d5921a59" kindref="member" tooltip="Delay the given number of microseconds.">delay_us</ref>(10);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>start<sp/>then<sp/>stop<sp/>condition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a1a8578058d9bcbf287484ec425bb9f5f" kindref="member" tooltip="SDA bit on gpio_port.">sda_pin</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="delay_8h_1ab6a09ce7e805fd3c213ba6d2d5921a59" kindref="member" tooltip="Delay the given number of microseconds.">delay_us</ref>(10);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="delay_8h_1ab6a09ce7e805fd3c213ba6d2d5921a59" kindref="member" tooltip="Delay the given number of microseconds.">delay_us</ref>(10);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="delay_8h_1ab6a09ce7e805fd3c213ba6d2d5921a59" kindref="member" tooltip="Delay the given number of microseconds.">delay_us</ref>(10);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a1a8578058d9bcbf287484ec425bb9f5f" kindref="member" tooltip="SDA bit on gpio_port.">sda_pin</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="i2c_8h_1af8cfdd992921cde40e1602a9b34e25ae" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1af8cfdd992921cde40e1602a9b34e25ae" kindref="member" tooltip="Initialize an I2C device and reset its registers to their default values.">i2c_init</ref>(<ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>rcc_reset_dev(dev-&gt;<ref refid="structi2c__dev_1a1d65d86bc935e410dedb99513f8067b9" kindref="member" tooltip="RCC clock information.">clk_id</ref>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>rcc_clk_enable(dev-&gt;<ref refid="structi2c__dev_1a1d65d86bc935e410dedb99513f8067b9" kindref="member" tooltip="RCC clock information.">clk_id</ref>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="i2c_8h_1a452bf35cbe145bbdf2def959891952f1" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a452bf35cbe145bbdf2def959891952f1" kindref="member" tooltip="Initialize an I2C device as bus master.">i2c_master_enable</ref>(<ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev,<sp/>uint32<sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_CLK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(STM32_PCLK1/1000000)</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>ccr<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32<sp/>trise<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PE<sp/>must<sp/>be<sp/>disabled<sp/>to<sp/>configure<sp/>the<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(!(dev-&gt;<ref refid="structi2c__dev_1a770bf7447fdee9e9a919393cedf327c5" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structi2c__reg__map_1abb271ffe6065de30f01e4580ea559ef5" kindref="member" tooltip="Control register 1.">CR1</ref><sp/>&amp;<sp/>I2C_CR1_PE));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dev<sp/>==<sp/>I2C1)<sp/>&amp;&amp;<sp/>(flags<sp/>&amp;<sp/>I2C_REMAP))<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afio_remap(<ref refid="gpio_8h_1acd23b228f428f4f44bd28287d6f04c29a6ff4fc9056ae448e308b88b83bcbf717" kindref="member" tooltip="I2C 1 remapping.">AFIO_REMAP_I2C1</ref>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C1-&gt;<ref refid="structi2c__dev_1a1a8578058d9bcbf287484ec425bb9f5f" kindref="member" tooltip="SDA bit on gpio_port.">sda_pin</ref><sp/>=<sp/>9;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C1-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>bus.<sp/>Clock<sp/>out<sp/>any<sp/>hung<sp/>slaves.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>I2C_BUS_RESET)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1aab3886f4f42b3c5aa303311db6cba2ce" kindref="member" tooltip="Reset an I2C bus.">i2c_bus_reset</ref>(dev);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Turn<sp/>on<sp/>clock<sp/>and<sp/>set<sp/>GPIO<sp/>modes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1af8cfdd992921cde40e1602a9b34e25ae" kindref="member" tooltip="Initialize an I2C device and reset its registers to their default values.">i2c_init</ref>(dev);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_set_mode(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a1a8578058d9bcbf287484ec425bb9f5f" kindref="member" tooltip="SDA bit on gpio_port.">sda_pin</ref>,<sp/><ref refid="gpio_8h_1a3bb60796972f15de31c709442d82c7eaa78f09e7f733bdcdc0aee0bb76b055c19" kindref="member" tooltip="Alternate function output open drain.">GPIO_AF_OUTPUT_OD</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>gpio_set_mode(dev-&gt;<ref refid="structi2c__dev_1afe11205c9bf23c8aa90a9a05921b66fb" kindref="member" tooltip="SDA, SCL pins&amp;#39; GPIO port.">gpio_port</ref>,<sp/>dev-&gt;<ref refid="structi2c__dev_1a08028527337ea71f5c53497076703fa0" kindref="member" tooltip="SCL bit on gpio_port.">scl_pin</ref>,<sp/><ref refid="gpio_8h_1a3bb60796972f15de31c709442d82c7eaa78f09e7f733bdcdc0aee0bb76b055c19" kindref="member" tooltip="Alternate function output open drain.">GPIO_AF_OUTPUT_OD</ref>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>I2C1<sp/>and<sp/>I2C2<sp/>are<sp/>fed<sp/>from<sp/>APB1,<sp/>clocked<sp/>at<sp/>36MHz<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1ac689edbe53b35ee1aa991a3c0377b403" kindref="member" tooltip="Set input clock frequency, in MHz.">i2c_set_input_clk</ref>(dev,<sp/>I2C_CLK);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>I2C_FAST_MODE)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccr<sp/>|=<sp/>I2C_CCR_FS;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>I2C_DUTY_16_9)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tlow/Thigh<sp/>=<sp/>16/9<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccr<sp/>|=<sp/>I2C_CCR_DUTY;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccr<sp/>|=<sp/><ref refid="stm32_8h_1a79d8b0164de9c4437da78024b0ed94cb" kindref="member" tooltip="APB1 clock speed, in Hz.">STM32_PCLK1</ref>/(400000<sp/>*<sp/>25);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tlow/Thigh<sp/>=<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccr<sp/>|=<sp/><ref refid="stm32_8h_1a79d8b0164de9c4437da78024b0ed94cb" kindref="member" tooltip="APB1 clock speed, in Hz.">STM32_PCLK1</ref>/(400000<sp/>*<sp/>3);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trise<sp/>=<sp/>(300<sp/>*<sp/>(I2C_CLK)/1000)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tlow/Thigh<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccr<sp/>=<sp/><ref refid="stm32_8h_1a79d8b0164de9c4437da78024b0ed94cb" kindref="member" tooltip="APB1 clock speed, in Hz.">STM32_PCLK1</ref>/(100000<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trise<sp/>=<sp/>I2C_CLK<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>minimum<sp/>required<sp/>value<sp/>if<sp/>CCR<sp/>&lt;<sp/>1*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ccr<sp/>&amp;<sp/>I2C_CCR_CCR)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccr<sp/>|=<sp/>0x1;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1ac6814d6ac4068949197003b43f3a213f" kindref="member" tooltip="Set I2C clock control register.">i2c_set_clk_control</ref>(dev,<sp/>ccr);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1ab449d7e74e40ebeb3f015575d92734f8" kindref="member" tooltip="Set SCL rise time.">i2c_set_trise</ref>(dev,<sp/>trise);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>event<sp/>and<sp/>buffer<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nvic_8h_1a51e6b1b0e83aac5cd8f1a50255db6b45" kindref="member" tooltip="Enable interrupt irq_num.">nvic_irq_enable</ref>(dev-&gt;<ref refid="structi2c__dev_1a1eab3b8e31794d3a88844704bc80f5a1" kindref="member" tooltip="Event IRQ number.">ev_nvic_line</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="nvic_8h_1a51e6b1b0e83aac5cd8f1a50255db6b45" kindref="member" tooltip="Enable interrupt irq_num.">nvic_irq_enable</ref>(dev-&gt;<ref refid="structi2c__dev_1aecdb8c9b799063905520bb7f87503ee9" kindref="member" tooltip="Error IRQ number.">er_nvic_line</ref>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_enable_irq(dev,<sp/>I2C_IRQ_EVENT<sp/>|<sp/>I2C_IRQ_BUFFER<sp/>|<sp/><ref refid="i2c_8h_1a52a80944a72431b51fd928d904486db7" kindref="member" tooltip="Enable one or more I2C interrupts.">I2C_IRQ_ERROR</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Important<sp/>STM32<sp/>Errata:</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>See<sp/>STM32F10xx8<sp/>and<sp/>STM32F10xxB<sp/>Errata<sp/>sheet<sp/>(Doc<sp/>ID<sp/>14574<sp/>Rev<sp/>8),</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Section<sp/>2.11.1,<sp/>2.11.2.</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>2.11.1:</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>When<sp/>the<sp/>EV7,<sp/>EV7_1,<sp/>EV6_1,<sp/>EV6_3,<sp/>EV2,<sp/>EV8,<sp/>and<sp/>EV3<sp/>events<sp/>are<sp/>not</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>managed<sp/>before<sp/>the<sp/>current<sp/>byte<sp/>is<sp/>being<sp/>transferred,<sp/>problems<sp/>may<sp/>be</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>encountered<sp/>such<sp/>as<sp/>receiving<sp/>an<sp/>extra<sp/>byte,<sp/>reading<sp/>the<sp/>same<sp/>data<sp/>twice</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>or<sp/>missing<sp/>data.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>2.11.2:</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>Master<sp/>Receiver<sp/>mode,<sp/>when<sp/>closing<sp/>the<sp/>communication<sp/>using</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>method<sp/>2,<sp/>the<sp/>content<sp/>of<sp/>the<sp/>last<sp/>read<sp/>data<sp/>can<sp/>be<sp/>corrupted.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>user<sp/>software<sp/>is<sp/>not<sp/>able<sp/>to<sp/>read<sp/>the<sp/>data<sp/>N-1<sp/>before<sp/>the<sp/>STOP</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>condition<sp/>is<sp/>generated<sp/>on<sp/>the<sp/>bus,<sp/>the<sp/>content<sp/>of<sp/>the<sp/>shift<sp/>register</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>(data<sp/>N)<sp/>will<sp/>be<sp/>corrupted.<sp/>(data<sp/>N<sp/>is<sp/>shifted<sp/>1-bit<sp/>to<sp/>the<sp/>left).</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>order<sp/>to<sp/>ensure<sp/>that<sp/>events<sp/>are<sp/>not<sp/>missed,<sp/>the<sp/>i2c<sp/>interrupt<sp/>must</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>not<sp/>be<sp/>preempted.<sp/>We<sp/>set<sp/>the<sp/>i2c<sp/>interrupt<sp/>priority<sp/>to<sp/>be<sp/>the<sp/>highest</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>interrupt<sp/>in<sp/>the<sp/>system<sp/>(priority<sp/>level<sp/>0).<sp/>All<sp/>other<sp/>interrupts<sp/>have</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>been<sp/>initialized<sp/>to<sp/>priority<sp/>level<sp/>16.<sp/>See<sp/>nvic_init().</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>nvic_irq_set_priority(dev-&gt;<ref refid="structi2c__dev_1a1eab3b8e31794d3a88844704bc80f5a1" kindref="member" tooltip="Event IRQ number.">ev_nvic_line</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>nvic_irq_set_priority(dev-&gt;<ref refid="structi2c__dev_1aecdb8c9b799063905520bb7f87503ee9" kindref="member" tooltip="Error IRQ number.">er_nvic_line</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>it<sp/>go!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a8d68fb99a8a2536a75fd9008fac9d2d3" kindref="member" tooltip="Turn on an I2C peripheral.">i2c_peripheral_enable</ref>(dev);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad1c99c4368625947a2e98284df705d91" kindref="member" tooltip="Device state.">state</ref><sp/>=<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa6ec919e5ab4c1e707e4341497c56ef3a" kindref="member" tooltip="Idle.">I2C_STATE_IDLE</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="i2c_8h_1aafcba989e09effa08b3b8414326b52ef" refkind="member"><highlight class="normal">int32<sp/><ref refid="i2c_8c_1aafcba989e09effa08b3b8414326b52ef" kindref="member" tooltip="Process an i2c transaction.">i2c_master_xfer</ref>(<ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structi2c__msg" kindref="compound" tooltip="I2C message type.">i2c_msg</ref><sp/>*msgs,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16<sp/>num,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>timeout)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>rc;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(dev-&gt;<ref refid="structi2c__dev_1ad1c99c4368625947a2e98284df705d91" kindref="member" tooltip="Device state.">state</ref><sp/>==<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa6ec919e5ab4c1e707e4341497c56ef3a" kindref="member" tooltip="Idle.">I2C_STATE_IDLE</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad7c032f3abb09d59b6c3191c0249bfbf" kindref="member" tooltip="Messages.">msg</ref><sp/>=<sp/>msgs;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ae752e1f62474bced6b88cdce32be2cc9" kindref="member" tooltip="Messages left.">msgs_left</ref><sp/>=<sp/>num;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1a548eb25d2d6906db7b49976c85a7979d" kindref="member" tooltip="For internal use.">timestamp</ref><sp/>=<sp/><ref refid="systick_8h_1a8d9e8be23ed5bcf7ee68333180d1e8ec" kindref="member" tooltip="Returns the system uptime, in milliseconds.">systick_uptime</ref>();</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad1c99c4368625947a2e98284df705d91" kindref="member" tooltip="Device state.">state</ref><sp/>=<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa14c205a74425e3c05c129652c52180ab" kindref="member" tooltip="Busy.">I2C_STATE_BUSY</ref>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>i2c_enable_irq(dev,<sp/>I2C_IRQ_EVENT);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a001c83b552f3002bc6ff294e0a3a03e0" kindref="member" tooltip="Generate a start condition on the bus.">i2c_start_condition</ref>(dev);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/><ref refid="i2c_8c_1a64f21519a98b697cf0231e981e166f0d" kindref="member" tooltip="Wait for an I2C event, or time out in case of error.">wait_for_state_change</ref>(dev,<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa29bc11ff47f471f704fab5c69974a692" kindref="member" tooltip="Done with transfer.">I2C_STATE_XFER_DONE</ref>,<sp/>timeout);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structi2c__dev_1ad1c99c4368625947a2e98284df705d91" kindref="member" tooltip="Device state.">state</ref><sp/>=<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aa6ec919e5ab4c1e707e4341497c56ef3a" kindref="member" tooltip="Idle.">I2C_STATE_IDLE</ref>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">out:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rc;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="i2c_8c_1a64f21519a98b697cf0231e981e166f0d" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32<sp/><ref refid="i2c_8c_1a64f21519a98b697cf0231e981e166f0d" kindref="member" tooltip="Wait for an I2C event, or time out in case of error.">wait_for_state_change</ref>(<ref refid="structi2c__dev" kindref="compound" tooltip="I2C device type.">i2c_dev</ref><sp/>*dev,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190a" kindref="member" tooltip="I2C device states.">i2c_state</ref><sp/>state,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>timeout)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190a" kindref="member" tooltip="I2C device states.">i2c_state</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>dev-&gt;<ref refid="structi2c__dev_1ad1c99c4368625947a2e98284df705d91" kindref="member" tooltip="Device state.">state</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>==<sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aadd0d5082a2cf148823e1b8307728b011" kindref="member" tooltip="Error occurred.">I2C_STATE_ERROR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a3acd3f8324118cb8c44f79b0fa24190aadd0d5082a2cf148823e1b8307728b011" kindref="member" tooltip="Error occurred.">I2C_STATE_ERROR</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmp<sp/>==<sp/>state)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timeout)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="systick_8h_1a8d9e8be23ed5bcf7ee68333180d1e8ec" kindref="member" tooltip="Returns the system uptime, in milliseconds.">systick_uptime</ref>()<sp/>&gt;<sp/>(dev-&gt;<ref refid="structi2c__dev_1a548eb25d2d6906db7b49976c85a7979d" kindref="member" tooltip="For internal use.">timestamp</ref><sp/>+<sp/>timeout))<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>overflow?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>racy?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I2C_ERROR_TIMEOUT;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mbolivar/leaf/libmaple/libmaple/i2c.c"/>
  </compounddef>
</doxygen>
