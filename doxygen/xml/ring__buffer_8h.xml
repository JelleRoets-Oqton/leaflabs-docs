<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="ring__buffer_8h" kind="file">
    <compoundname>ring_buffer.h</compoundname>
    <includes refid="libmaple__types_8h" local="yes">libmaple_types.h</includes>
    <includedby refid="usart_8h" local="yes">libmaple/usart.h</includedby>
    <incdepgraph>
      <node id="509">
        <label>libmaple_types.h</label>
        <link refid="libmaple__types_8h"/>
      </node>
      <node id="508">
        <label>libmaple/ring_buffer.h</label>
        <link refid="ring_buffer.h"/>
        <childnode refid="509" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="515">
        <label>wirish/wirish.h</label>
        <link refid="wirish_8h_source"/>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="518" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
      </node>
      <node id="514">
        <label>wirish/comm/HardwareSerial.h</label>
        <link refid="_hardware_serial_8h"/>
        <childnode refid="515" relation="include">
        </childnode>
      </node>
      <node id="512">
        <label>libmaple/usart.c</label>
        <link refid="usart_8c"/>
      </node>
      <node id="511">
        <label>libmaple/usart.h</label>
        <link refid="usart_8h"/>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
      </node>
      <node id="518">
        <label>libraries/LiquidCrystal/LiquidCrystal.h</label>
        <link refid="_liquid_crystal_8h_source"/>
      </node>
      <node id="510">
        <label>libmaple/ring_buffer.h</label>
        <link refid="ring_buffer.h"/>
        <childnode refid="511" relation="include">
        </childnode>
      </node>
      <node id="519">
        <label>libraries/Wire/Wire.h</label>
        <link refid="_wire_8h_source"/>
      </node>
      <node id="516">
        <label>wirish/WProgram.h</label>
        <link refid="_w_program_8h_source"/>
      </node>
      <node id="517">
        <label>libraries/FreeRTOS/MapleFreeRTOS.h</label>
        <link refid="_maple_free_r_t_o_s_8h_source"/>
      </node>
      <node id="513">
        <label>libmaple/util.c</label>
        <link refid="util_8c_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structring__buffer" prot="public">ring_buffer</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="ring__buffer_8h_1aa9af1a473f040889f02ab3a8fb9d01f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void rb_init</definition>
        <argsstring>(ring_buffer *rb, uint16 size, uint8 *buf)</argsstring>
        <name>rb_init</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>uint16</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8 *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Initialise a ring buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance to initialise</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of items in buf. The ring buffer will always leave one element unoccupied, so the maximum number of elements it can store will be size - 1. Thus, size must be at least 2.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store items into </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="72" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1ad406625a0c387e7229a73e8b668e6ee3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16</type>
        <definition>static uint16 rb_full_count</definition>
        <argsstring>(ring_buffer *rb)</argsstring>
        <name>rb_full_count</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
<para>Return the number of elements stored in the ring buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer whose elements to count. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="83" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1a9ec85332d3125990092d0322953ba108" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rb_is_full</definition>
        <argsstring>(ring_buffer *rb)</argsstring>
        <name>rb_is_full</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
<para>Returns true if and only if the ring buffer is full. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="96" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1a20f3557193d14184b9898796357d3ea0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rb_is_empty</definition>
        <argsstring>(ring_buffer *rb)</argsstring>
        <name>rb_is_empty</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
<para>Returns true if and only if the ring buffer is empty. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to test. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="105" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1a6bdb70bd47d17ecc1c2356b17ae45898" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void rb_insert</definition>
        <argsstring>(ring_buffer *rb, uint8 element)</argsstring>
        <name>rb_insert</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Append element onto the end of a ring buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to append onto. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to append. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="114" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1ac8a79086d32e51e62186880119cf4641" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8</type>
        <definition>static uint8 rb_remove</definition>
        <argsstring>(ring_buffer *rb)</argsstring>
        <name>rb_remove</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
<para>Remove and return the first item from a ring buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to remove from, must contain at least one element. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="123" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1a639417574ca07e8a1cb62149f046c18d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int16</type>
        <definition>static int16 rb_safe_remove</definition>
        <argsstring>(ring_buffer *rb)</argsstring>
        <name>rb_safe_remove</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
<para>Attempt to remove the first item from a ring buffer. </para>        </briefdescription>
        <detaileddescription>
<para>If the ring buffer is nonempty, removes and returns its first item. If it is empty, does nothing and returns a negative value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to attempt to remove from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="137" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1af47583ba110bbe64f1eb4b12271661d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rb_safe_insert</definition>
        <argsstring>(ring_buffer *rb, uint8 element)</argsstring>
        <name>rb_safe_insert</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Attempt to insert an element into a ring buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to insert into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to insert into rb. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Side Effects:</title><para>If rb is not full, appends element onto buffer. </para></simplesect>
<simplesect kind="return"><para>If element was appended, then true; otherwise, false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="148" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="148" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1a98f1c6646a6128a881556190459a320a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int rb_push_insert</definition>
        <argsstring>(ring_buffer *rb, uint8 element)</argsstring>
        <name>rb_push_insert</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>element</declname>
        </param>
        <briefdescription>
<para>Append an item onto the end of a non-full ring buffer. </para>        </briefdescription>
        <detaileddescription>
<para>If the buffer is full, removes its first item, then inserts the new element at the end.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Ring buffer to insert into. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to insert into ring buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, returns -1. If an element was popped, returns the popped value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="167" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="ring__buffer_8h_1aa150c847dc8f29454f99c3ec143ef768" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void rb_reset</definition>
        <argsstring>(ring_buffer *rb)</argsstring>
        <name>rb_reset</name>
        <param>
          <type><ref refid="structring__buffer" kindref="compound">ring_buffer</ref> *</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
<para>Discard all items from a ring buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>Ring buffer to discard all items from. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" line="180" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h" bodystart="180" bodyend="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Simple circular buffer. </para>    </briefdescription>
    <detaileddescription>
<para>This implementation is not thread-safe. In particular, none of these functions is guaranteed re-entrant. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2011<sp/>LeafLabs,<sp/>LLC.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor">#ifndef<sp/>_RING_BUFFER_H_</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_RING_BUFFER_H_</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libmaple__types_8h" kindref="compound" tooltip="libmaple types">libmaple_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="53" refid="structring__buffer" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>{</highlight></codeline>
<codeline lineno="54" refid="structring__buffer_1a378c22393f22f35c9ffc578fbe24a053" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8<sp/>*<ref refid="structring__buffer_1a378c22393f22f35c9ffc578fbe24a053" kindref="member" tooltip="Buffer items are stored into.">buf</ref>;<sp/></highlight></codeline>
<codeline lineno="55" refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/><ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56" refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/><ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57" refid="structring__buffer_1a8460866e7996a33700c062824c8fefae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16<sp/><ref refid="structring__buffer_1a8460866e7996a33700c062824c8fefae" kindref="member" tooltip="Buffer capacity minus one.">size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal">}<sp/><ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="ring__buffer_8h_1aa9af1a473f040889f02ab3a8fb9d01f2" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ring__buffer_8h_1aa9af1a473f040889f02ab3a8fb9d01f2" kindref="member" tooltip="Initialise a ring buffer.">rb_init</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb,<sp/>uint16<sp/>size,<sp/>uint8<sp/>*buf)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;<ref refid="structring__buffer_1a8460866e7996a33700c062824c8fefae" kindref="member" tooltip="Buffer capacity minus one.">size</ref><sp/>=<sp/>size<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;<ref refid="structring__buffer_1a378c22393f22f35c9ffc578fbe24a053" kindref="member" tooltip="Buffer items are stored into.">buf</ref><sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="ring__buffer_8h_1ad406625a0c387e7229a73e8b668e6ee3" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16<sp/><ref refid="ring__buffer_8h_1ad406625a0c387e7229a73e8b668e6ee3" kindref="member" tooltip="Return the number of elements stored in the ring buffer.">rb_full_count</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>__io<sp/><ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*arb<sp/>=<sp/>rb;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>int32<sp/>size<sp/>=<sp/>arb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref><sp/>-<sp/>arb-&gt;head;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arb-&gt;tail<sp/>&lt;<sp/>arb-&gt;head)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>arb-&gt;size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16)size;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="ring__buffer_8h_1a9ec85332d3125990092d0322953ba108" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ring__buffer_8h_1a9ec85332d3125990092d0322953ba108" kindref="member" tooltip="Returns true if and only if the ring buffer is full.">rb_is_full</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref><sp/>+<sp/>1<sp/>==<sp/>rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref>)<sp/>||</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref><sp/>==<sp/>rb-&gt;<ref refid="structring__buffer_1a8460866e7996a33700c062824c8fefae" kindref="member" tooltip="Buffer capacity minus one.">size</ref><sp/>&amp;&amp;<sp/>rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="ring__buffer_8h_1a20f3557193d14184b9898796357d3ea0" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ring__buffer_8h_1a20f3557193d14184b9898796357d3ea0" kindref="member" tooltip="Returns true if and only if the ring buffer is empty.">rb_is_empty</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref><sp/>==<sp/>rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="ring__buffer_8h_1a6bdb70bd47d17ecc1c2356b17ae45898" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ring__buffer_8h_1a6bdb70bd47d17ecc1c2356b17ae45898" kindref="member" tooltip="Append element onto the end of a ring buffer.">rb_insert</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb,<sp/>uint8<sp/>element)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;<ref refid="structring__buffer_1a378c22393f22f35c9ffc578fbe24a053" kindref="member" tooltip="Buffer items are stored into.">buf</ref>[rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref>]<sp/>=<sp/>element;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref><sp/>=<sp/>(rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref><sp/>==<sp/>rb-&gt;<ref refid="structring__buffer_1a8460866e7996a33700c062824c8fefae" kindref="member" tooltip="Buffer capacity minus one.">size</ref>)<sp/>?<sp/>0<sp/>:<sp/>rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="ring__buffer_8h_1ac8a79086d32e51e62186880119cf4641" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8<sp/><ref refid="ring__buffer_8h_1ac8a79086d32e51e62186880119cf4641" kindref="member" tooltip="Remove and return the first item from a ring buffer.">rb_remove</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8<sp/>ch<sp/>=<sp/>rb-&gt;<ref refid="structring__buffer_1a378c22393f22f35c9ffc578fbe24a053" kindref="member" tooltip="Buffer items are stored into.">buf</ref>[rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref>];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref><sp/>=<sp/>(rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref><sp/>==<sp/>rb-&gt;<ref refid="structring__buffer_1a8460866e7996a33700c062824c8fefae" kindref="member" tooltip="Buffer capacity minus one.">size</ref>)<sp/>?<sp/>0<sp/>:<sp/>rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="ring__buffer_8h_1a639417574ca07e8a1cb62149f046c18d" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int16<sp/><ref refid="ring__buffer_8h_1a639417574ca07e8a1cb62149f046c18d" kindref="member" tooltip="Attempt to remove the first item from a ring buffer.">rb_safe_remove</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="ring__buffer_8h_1a20f3557193d14184b9898796357d3ea0" kindref="member" tooltip="Returns true if and only if the ring buffer is empty.">rb_is_empty</ref>(rb)<sp/>?<sp/>-1<sp/>:<sp/><ref refid="ring__buffer_8h_1ac8a79086d32e51e62186880119cf4641" kindref="member" tooltip="Remove and return the first item from a ring buffer.">rb_remove</ref>(rb);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="ring__buffer_8h_1af47583ba110bbe64f1eb4b12271661d9" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ring__buffer_8h_1af47583ba110bbe64f1eb4b12271661d9" kindref="member" tooltip="Attempt to insert an element into a ring buffer.">rb_safe_insert</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb,<sp/>uint8<sp/>element)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ring__buffer_8h_1a9ec85332d3125990092d0322953ba108" kindref="member" tooltip="Returns true if and only if the ring buffer is full.">rb_is_full</ref>(rb))<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ring__buffer_8h_1a6bdb70bd47d17ecc1c2356b17ae45898" kindref="member" tooltip="Append element onto the end of a ring buffer.">rb_insert</ref>(rb,<sp/>element);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="ring__buffer_8h_1a98f1c6646a6128a881556190459a320a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="ring__buffer_8h_1a98f1c6646a6128a881556190459a320a" kindref="member" tooltip="Append an item onto the end of a non-full ring buffer.">rb_push_insert</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb,<sp/>uint8<sp/>element)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ring__buffer_8h_1a9ec85332d3125990092d0322953ba108" kindref="member" tooltip="Returns true if and only if the ring buffer is full.">rb_is_full</ref>(rb))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="ring__buffer_8h_1ac8a79086d32e51e62186880119cf4641" kindref="member" tooltip="Remove and return the first item from a ring buffer.">rb_remove</ref>(rb);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="ring__buffer_8h_1a6bdb70bd47d17ecc1c2356b17ae45898" kindref="member" tooltip="Append element onto the end of a ring buffer.">rb_insert</ref>(rb,<sp/>element);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="ring__buffer_8h_1aa150c847dc8f29454f99c3ec143ef768" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ring__buffer_8h_1aa150c847dc8f29454f99c3ec143ef768" kindref="member" tooltip="Discard all items from a ring buffer.">rb_reset</ref>(<ref refid="structring__buffer" kindref="compound" tooltip="Ring buffer type.">ring_buffer</ref><sp/>*rb)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>rb-&gt;<ref refid="structring__buffer_1af6474eb288b75ca0b477a266f7d75ebc" kindref="member" tooltip="Index where the next item will get inserted.">tail</ref><sp/>=<sp/>rb-&gt;<ref refid="structring__buffer_1ab43738608cd5ef082f98c618ba65f6c1" kindref="member" tooltip="Index of the next item to remove.">head</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mbolivar/leaf/libmaple/libmaple/ring_buffer.h"/>
  </compounddef>
</doxygen>
