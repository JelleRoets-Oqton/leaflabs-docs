<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="usb_8c" kind="file">
    <compoundname>usb.c</compoundname>
    <includes refid="usb_8h" local="yes">usb.h</includes>
    <includes refid="libmaple_8h" local="yes">libmaple.h</includes>
    <includes refid="usb__lib_8h" local="yes">usb_lib.h</includes>
    <includes refid="gpio_8h" local="yes">gpio.h</includes>
    <includes refid="usb__hardware_8h" local="yes">usb_hardware.h</includes>
    <includes refid="delay_8h" local="yes">delay.h</includes>
    <includes refid="usb__config_8h" local="yes">usb_config.h</includes>
    <includes refid="usb__callbacks_8h" local="yes">usb_callbacks.h</includes>
    <incdepgraph>
      <node id="720">
        <label>libmaple/usb/usb.c</label>
        <link refid="usb.c"/>
        <childnode refid="721" relation="include">
        </childnode>
        <childnode refid="730" relation="include">
        </childnode>
        <childnode refid="722" relation="include">
        </childnode>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="737" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
        <childnode refid="739" relation="include">
        </childnode>
      </node>
      <node id="721">
        <label>usb.h</label>
        <link refid="usb_8h_source"/>
        <childnode refid="722" relation="include">
        </childnode>
        <childnode refid="730" relation="include">
        </childnode>
      </node>
      <node id="736">
        <label>rcc.h</label>
        <link refid="rcc_8h"/>
        <childnode refid="731" relation="include">
        </childnode>
      </node>
      <node id="737">
        <label>usb_hardware.h</label>
        <link refid="usb__hardware_8h_source"/>
        <childnode refid="736" relation="include">
        </childnode>
        <childnode refid="723" relation="include">
        </childnode>
      </node>
      <node id="732">
        <label>stm32.h</label>
        <link refid="stm32_8h"/>
      </node>
      <node id="731">
        <label>libmaple_types.h</label>
        <link refid="libmaple__types_8h"/>
      </node>
      <node id="728">
        <label>usb_mem.h</label>
        <link refid="usb__mem_8h_source"/>
      </node>
      <node id="723">
        <label>usb_type.h</label>
        <link refid="usb__type_8h_source"/>
      </node>
      <node id="730">
        <label>libmaple.h</label>
        <link refid="libmaple_8h"/>
        <childnode refid="731" relation="include">
        </childnode>
        <childnode refid="732" relation="include">
        </childnode>
        <childnode refid="733" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
      </node>
      <node id="729">
        <label>usb_int.h</label>
        <link refid="usb__int_8h_source"/>
      </node>
      <node id="722">
        <label>usb_lib.h</label>
        <link refid="usb__lib_8h_source"/>
        <childnode refid="723" relation="include">
        </childnode>
        <childnode refid="724" relation="include">
        </childnode>
        <childnode refid="725" relation="include">
        </childnode>
        <childnode refid="726" relation="include">
        </childnode>
        <childnode refid="727" relation="include">
        </childnode>
        <childnode refid="728" relation="include">
        </childnode>
        <childnode refid="729" relation="include">
        </childnode>
      </node>
      <node id="738">
        <label>usb_config.h</label>
        <link refid="usb__config_8h_source"/>
        <childnode refid="722" relation="include">
        </childnode>
        <childnode refid="735" relation="include">
        </childnode>
      </node>
      <node id="727">
        <label>usb_init.h</label>
        <link refid="usb__init_8h_source"/>
      </node>
      <node id="725">
        <label>usb_def.h</label>
        <link refid="usb__def_8h_source"/>
      </node>
      <node id="735">
        <label>gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="730" relation="include">
        </childnode>
        <childnode refid="736" relation="include">
        </childnode>
      </node>
      <node id="726">
        <label>usb_core.h</label>
        <link refid="usb__core_8h_source"/>
      </node>
      <node id="734">
        <label>delay.h</label>
        <link refid="delay_8h"/>
        <childnode refid="731" relation="include">
        </childnode>
        <childnode refid="732" relation="include">
        </childnode>
      </node>
      <node id="724">
        <label>usb_regs.h</label>
        <link refid="usb__regs_8h_source"/>
      </node>
      <node id="733">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="731" relation="include">
        </childnode>
      </node>
      <node id="739">
        <label>usb_callbacks.h</label>
        <link refid="usb__callbacks_8h_source"/>
        <childnode refid="730" relation="include">
        </childnode>
        <childnode refid="722" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="usb_8c_1ae4eedd9f346043cc9e45032cafc9d513" prot="public" static="no" mutable="no">
        <type>uint32</type>
        <definition>volatile uint32 bDeviceState</definition>
        <argsstring></argsstring>
        <name>bDeviceState</name>
        <initializer> UNCONNECTED</initializer>
        <briefdescription>
<para>usb-specific hardware setup, NVIC, clocks, and usb activities in the pre-attached state. </para>        </briefdescription>
        <detaileddescription>
<para>includes some of the lower level callbacks needed by the usb library, like suspend,resume,init,etc </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="46" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a36eb4cd6a10342d2570818d571c2817a" prot="public" static="no" mutable="no">
        <type>uint16</type>
        <definition>volatile uint16 wIstr</definition>
        <argsstring></argsstring>
        <name>wIstr</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="47" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a954a86bddf5d695a695c1aaddcb5769a" prot="public" static="no" mutable="no">
        <type>uint32</type>
        <definition>volatile uint32 bIntPackSOF</definition>
        <argsstring></argsstring>
        <name>bIntPackSOF</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="48" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1afa47e7c7d5d6fb4c682e16c89c1b7d75" prot="public" static="no" mutable="no">
        <type><ref refid="struct_d_e_v_i_c_e" kindref="compound">DEVICE</ref></type>
        <definition>DEVICE Device_Table</definition>
        <argsstring></argsstring>
        <name>Device_Table</name>
        <initializer>
    {NUM_ENDPTS,
     1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="52" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a646bdfc60e69ee637f2c39b5bb91dfec" prot="public" static="no" mutable="no">
        <type><ref refid="struct_d_e_v_i_c_e___p_r_o_p" kindref="compound">DEVICE_PROP</ref></type>
        <definition>DEVICE_PROP Device_Property</definition>
        <argsstring></argsstring>
        <name>Device_Property</name>
        <initializer>
    {usbInit,
     usbReset,
     usbStatusIn,
     usbStatusOut,
     usbDataSetup,
     usbNoDataSetup,
     usbGetInterfaceSetting,
     usbGetDeviceDescriptor,
     usbGetConfigDescriptor,
     usbGetStringDescriptor,
     0,
     bMaxPacketSize}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="66" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a8d70d0a7e05cf9c172e4304def6b65b8" prot="public" static="no" mutable="no">
        <type><ref refid="struct_u_s_e_r___s_t_a_n_d_a_r_d___r_e_q_u_e_s_t_s" kindref="compound">USER_STANDARD_REQUESTS</ref></type>
        <definition>USER_STANDARD_REQUESTS User_Standard_Requests</definition>
        <argsstring></argsstring>
        <name>User_Standard_Requests</name>
        <initializer>
    {NOP_Process,
     usbSetConfiguration,
     NOP_Process,
     NOP_Process,
     NOP_Process,
     NOP_Process,
     NOP_Process,
     NOP_Process,
     usbSetDeviceAddress}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="77" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a0992c19a0f2e317fcd93f755d316a0fd" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* pEpInt_IN[7])(void)</definition>
        <argsstring>[7])(void)</argsstring>
        <name>pEpInt_IN</name>
        <initializer>
    {vcomDataTxCb,
     vcomManagementCb,
     NOP_Process,
     NOP_Process,
     NOP_Process,
     NOP_Process,
     NOP_Process}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="86" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a549396ff4348c565f52117dd27ad52ca" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* pEpInt_OUT[7])(void)</definition>
        <argsstring>[7])(void)</argsstring>
        <name>pEpInt_OUT</name>
        <initializer>
    {NOP_Process,
     NOP_Process,
     vcomDataRxCb,
     NOP_Process,
     NOP_Process,
     NOP_Process,
     NOP_Process}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="95" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a5e91fba49debb3bc3fdd2d768f9e3508" prot="public" static="no" mutable="no">
        <type>RESUME_STATE</type>
        <definition>volatile RESUME_STATE eState</definition>
        <argsstring></argsstring>
        <name>eState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="98" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a989712df157ae980d95e36a73c4bba53" prot="public" static="no" mutable="no">
        <type>uint8</type>
        <definition>volatile uint8 bESOFcnt</definition>
        <argsstring></argsstring>
        <name>bESOFcnt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="99" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="usb_8c_1a64fb19a8cb5288dc08573489fdefc6bc" prot="public" static="no" mutable="no">
        <type>struct @5</type>
        <definition>struct @5  ResumeS</definition>
        <argsstring></argsstring>
        <name>ResumeS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="100"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="usb_8c_1abf5a719b20fa8b6c21c4cfc33c76cc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setupUSB</definition>
        <argsstring>(void)</argsstring>
        <name>setupUSB</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="102" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="102" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1aa82f524e5f8a6737209b616e928f45ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void disableUSB</definition>
        <argsstring>(void)</argsstring>
        <name>disableUSB</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="113" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a476685b39ecb3b9495a6df4073e82d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbSuspend</definition>
        <argsstring>(void)</argsstring>
        <name>usbSuspend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="120" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="120" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a7044262a4d2f43ce779248def85a0d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbResumeInit</definition>
        <argsstring>(void)</argsstring>
        <name>usbResumeInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="130" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="130" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a917656430296794f6356363de92e86c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbResume</definition>
        <argsstring>(RESUME_STATE eResumeSetVal)</argsstring>
        <name>usbResume</name>
        <param>
          <type>RESUME_STATE</type>
          <declname>eResumeSetVal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="144" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="144" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1ac8788985f4c334f1f0e1b28c9b744321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RESULT</type>
        <definition>RESULT usbPowerOn</definition>
        <argsstring>(void)</argsstring>
        <name>usbPowerOn</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="193" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="193" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a859fdaa493c2e2c913bc0932720c7fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RESULT</type>
        <definition>RESULT usbPowerOff</definition>
        <argsstring>(void)</argsstring>
        <name>usbPowerOff</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="208" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="208" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1afabcf55b36c4f3504ab02cbef1ef42c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbEnbISR</definition>
        <argsstring>(void)</argsstring>
        <name>usbEnbISR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="224" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="224" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1ae633b4a2ed511e665f7f147a120247e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbDsbISR</definition>
        <argsstring>(void)</argsstring>
        <name>usbDsbISR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="233" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1ae95ffcb45c94f34dfdccc5c6c34c6084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __irq_usb_lp_can_rx0</definition>
        <argsstring>(void)</argsstring>
        <name>__irq_usb_lp_can_rx0</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="243" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="243" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a42aa6744ad00c810b2e6a4adad32a2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbWaitReset</definition>
        <argsstring>(void)</argsstring>
        <name>usbWaitReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="322" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1acc3d4339192d936e29f85762dd849d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbBlockingSendByte</definition>
        <argsstring>(char ch)</argsstring>
        <name>usbBlockingSendByte</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="338" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="338" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1ab0d748425b79bf7032c2925f47ce394d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 usbSendBytes</definition>
        <argsstring>(const uint8 *sendBuf, uint32 len)</argsstring>
        <name>usbSendBytes</name>
        <param>
          <type>const uint8 *</type>
          <declname>sendBuf</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="347" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="347" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a9d23e47ba8544b8c2e849a928b1f17bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 usbBytesAvailable</definition>
        <argsstring>(void)</argsstring>
        <name>usbBytesAvailable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="370" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="370" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a5edda390cf1d7e467c32ac4d985a44f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 usbReceiveBytes</definition>
        <argsstring>(uint8 *recvBuf, uint32 len)</argsstring>
        <name>usbReceiveBytes</name>
        <param>
          <type>uint8 *</type>
          <declname>recvBuf</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="378" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="378" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1af60c326dd6c390ad67343762df44bfe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usbSendHello</definition>
        <argsstring>(void)</argsstring>
        <name>usbSendHello</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="403" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="403" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a9918cacb98639622cd3f85e013166344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8</type>
        <definition>uint8 usbGetDTR</definition>
        <argsstring>()</argsstring>
        <name>usbGetDTR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="418" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a5660e8305e111e97011360094dc4a318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8</type>
        <definition>uint8 usbGetRTS</definition>
        <argsstring>()</argsstring>
        <name>usbGetRTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="422" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="422" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1ae405bdf05d3188d47febc94d0b2bfdfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8</type>
        <definition>uint8 usbIsConfigured</definition>
        <argsstring>()</argsstring>
        <name>usbIsConfigured</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="426" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="426" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1a1929504059645c8676bc70ddcf07ca39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8</type>
        <definition>uint8 usbIsConnected</definition>
        <argsstring>()</argsstring>
        <name>usbIsConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="430" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="430" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="usb_8c_1adebf780676d48c21c3c251bb69a68d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16</type>
        <definition>uint16 usbGetPending</definition>
        <argsstring>()</argsstring>
        <name>usbGetPending</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" line="434" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c" bodystart="434" bodyend="436"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010<sp/>LeafLabs<sp/>LLC.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor">#include<sp/>&quot;usb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libmaple_8h" kindref="compound" tooltip="General include file for libmaple.">libmaple.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usb_lib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gpio_8h" kindref="compound" tooltip="General purpose I/O (GPIO) and Alternate Function I/O (AFIO) prototypes, defines, and inlined access ...">gpio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usb_hardware.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="delay_8h" kindref="compound" tooltip="Delay implementation.">delay.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usb_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usb_callbacks.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usb_lib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>persistent<sp/>usb<sp/>structs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32<sp/>bDeviceState<sp/>=<sp/>UNCONNECTED;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16<sp/>wIstr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32<sp/>bIntPackSOF<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="struct_d_e_v_i_c_e" kindref="compound">DEVICE</ref><sp/>Device_Table<sp/>=</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{NUM_ENDPTS,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>1};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="struct_d_e_v_i_c_e___p_r_o_p" kindref="compound">DEVICE_PROP</ref><sp/>Device_Property<sp/>=</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{usbInit,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbReset,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbStatusIn,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbStatusOut,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbDataSetup,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbNoDataSetup,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbGetInterfaceSetting,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbGetDeviceDescriptor,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbGetConfigDescriptor,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbGetStringDescriptor,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>bMaxPacketSize};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="struct_u_s_e_r___s_t_a_n_d_a_r_d___r_e_q_u_e_s_t_s" kindref="compound">USER_STANDARD_REQUESTS</ref><sp/>User_Standard_Requests<sp/>=</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{NOP_Process,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbSetConfiguration,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>usbSetDeviceAddress};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">void<sp/>(*pEpInt_IN[7])(void)<sp/>=</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{vcomDataTxCb,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vcomManagementCb,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">void<sp/>(*pEpInt_OUT[7])(void)<sp/>=</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{NOP_Process,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vcomDataRxCb,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>NOP_Process};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>RESUME_STATE<sp/>eState;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8<sp/>bESOFcnt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}<sp/>ResumeS;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setupUSB<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>gpio_set_mode(USB_DISC_DEV,<sp/>USB_DISC_PIN,<sp/><ref refid="gpio_8h_1a3bb60796972f15de31c709442d82c7eaae00b5085249861846c28290ee6de1859" kindref="member" tooltip="Output push-pull.">GPIO_OUTPUT_PP</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>setup<sp/>the<sp/>apb1<sp/>clock<sp/>for<sp/>USB<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>pRCC-&gt;APB1ENR<sp/>|=<sp/>0x00800000;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>the<sp/>usb<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(USB_DISC_DEV,<sp/>USB_DISC_PIN,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>presents<sp/>us<sp/>to<sp/>the<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>USB_Init();<sp/><sp/></highlight><highlight class="comment">//<sp/>low<sp/>level<sp/>init<sp/>routine<sp/>provided<sp/>by<sp/>the<sp/>ST<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>disableUSB<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>just<sp/>guesses<sp/>about<sp/>how<sp/>to<sp/>do<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>real<sp/>disable<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>usbDsbISR();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><ref refid="gpio_8h_1a58adb02a517a5d32cc686df5bb2764a6" kindref="member" tooltip="Set or reset a GPIO pin.">gpio_write_bit</ref>(USB_DISC_DEV,<sp/>USB_DISC_PIN,<sp/>1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usbSuspend(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>u16<sp/>wCNTR;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>wCNTR<sp/>=<sp/>_GetCNTR();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>wCNTR<sp/>|=<sp/>CNTR_FSUSP<sp/>|<sp/>CNTR_LPMODE;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>_SetCNTR(wCNTR);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>run<sp/>any<sp/>power<sp/>reduction<sp/>handlers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>bDeviceState<sp/>=<sp/>SUSPENDED;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usbResumeInit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>u16<sp/>wCNTR;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>restart<sp/>any<sp/>clocks<sp/>that<sp/>had<sp/>been<sp/>stopped<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>wCNTR<sp/>=<sp/>_GetCNTR();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>wCNTR<sp/>&amp;=<sp/>(~CNTR_LPMODE);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>_SetCNTR(wCNTR);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>undo<sp/>power<sp/>reduction<sp/>handlers<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>_SetCNTR(ISR_MSK);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usbResume(RESUME_STATE<sp/>eResumeSetVal)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>u16<sp/>wCNTR;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eResumeSetVal<sp/>!=<sp/>RESUME_ESOF)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>ResumeS.eState<sp/>=<sp/>eResumeSetVal;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ResumeS.eState)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME_EXTERNAL:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usbResumeInit();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.eState<sp/>=<sp/>RESUME_OFF;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME_INTERNAL:</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>usbResumeInit();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.eState<sp/>=<sp/>RESUME_START;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME_LATER:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.bESOFcnt<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.eState<sp/>=<sp/>RESUME_WAIT;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME_WAIT:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.bESOFcnt--;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ResumeS.bESOFcnt<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.eState<sp/>=<sp/>RESUME_START;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME_START:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wCNTR<sp/>=<sp/>_GetCNTR();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wCNTR<sp/>|=<sp/>CNTR_RESUME;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_SetCNTR(wCNTR);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.eState<sp/>=<sp/>RESUME_ON;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.bESOFcnt<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME_ON:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.bESOFcnt--;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ResumeS.bESOFcnt<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wCNTR<sp/>=<sp/>_GetCNTR();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wCNTR<sp/>&amp;=<sp/>(~CNTR_RESUME);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_SetCNTR(wCNTR);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.eState<sp/>=<sp/>RESUME_OFF;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME_OFF:</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RESUME_ESOF:</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResumeS.eState<sp/>=<sp/>RESUME_OFF;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">RESULT<sp/>usbPowerOn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>u16<sp/>wRegVal;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>wRegVal<sp/>=<sp/>CNTR_FRES;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>_SetCNTR(wRegVal);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>wInterrupt_Mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>_SetCNTR(wInterrupt_Mask);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>_SetISTR(0);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>wInterrupt_Mask<sp/>=<sp/>CNTR_RESETM<sp/>|<sp/>CNTR_SUSPM<sp/>|<sp/>CNTR_WKUPM;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>bare<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>_SetCNTR(wInterrupt_Mask);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>USB_SUCCESS;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">RESULT<sp/>usbPowerOff(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>_SetCNTR(CNTR_FRES);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>_SetISTR(0);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>_SetCNTR(CNTR_FRES<sp/>+<sp/>CNTR_PDWN);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>note<sp/>that<sp/>all<sp/>weve<sp/>done<sp/>here<sp/>is<sp/>powerdown<sp/>the</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>usb<sp/>peripheral.<sp/>we<sp/>have<sp/>no<sp/>disabled<sp/>the<sp/>clocks,</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>pulled<sp/>the<sp/>usb_disc<sp/>pin<sp/>back<sp/>up,<sp/>or<sp/>reset<sp/>the</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>application<sp/>state<sp/>machines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>USB_SUCCESS;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>functions<sp/>(usbEnbISR/usbDsbISR)<sp/>are<sp/>implementented<sp/>in<sp/>ST<sp/>style,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>at<sp/>least<sp/>the<sp/>DsbISR<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>work?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usbEnbISR(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="struct_n_v_i_c___init_type_def" kindref="compound">NVIC_InitTypeDef</ref><sp/>NVIC_InitStructure;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>NVIC_InitStructure.NVIC_IRQChannel<sp/>=<sp/>USB_LP_IRQ;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>NVIC_InitStructure.NVIC_IRQChannelSubPriority<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>NVIC_InitStructure.NVIC_IRQChannelCmd<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>nvicInit(&amp;NVIC_InitStructure);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usbDsbISR(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="struct_n_v_i_c___init_type_def" kindref="compound">NVIC_InitTypeDef</ref><sp/>NVIC_InitStructure;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>NVIC_InitStructure.NVIC_IRQChannel<sp/>=<sp/>USB_LP_IRQ;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>NVIC_InitStructure.NVIC_IRQChannelSubPriority<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>NVIC_InitStructure.NVIC_IRQChannelCmd<sp/>=<sp/>FALSE;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>nvicInit(&amp;NVIC_InitStructure);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>overloaded<sp/>ISR<sp/>routine,<sp/>this<sp/>is<sp/>the<sp/>main<sp/>usb<sp/>ISR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__irq_usb_lp_can_rx0(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal">wIstr<sp/>=<sp/>_GetISTR();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>go<sp/>nuts<sp/>with<sp/>the<sp/>preproc<sp/>switches<sp/>since<sp/>this<sp/>is<sp/>an<sp/>ISTR<sp/>and<sp/>must<sp/>be<sp/>FAST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ISR_MSK<sp/>&amp;<sp/>ISTR_RESET)</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wIstr<sp/>&amp;<sp/>ISTR_RESET<sp/>&amp;<sp/>wInterrupt_Mask)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetISTR((u16)CLR_RESET);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>Device_Property.Reset();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ISR_MSK<sp/>&amp;<sp/>ISTR_DOVR)</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wIstr<sp/>&amp;<sp/>ISTR_DOVR<sp/>&amp;<sp/>wInterrupt_Mask)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetISTR((u16)CLR_DOVR);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ISR_MSK<sp/>&amp;<sp/>ISTR_ERR)</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wIstr<sp/>&amp;<sp/>ISTR_ERR<sp/>&amp;<sp/>wInterrupt_Mask)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetISTR((u16)CLR_ERR);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ISR_MSK<sp/>&amp;<sp/>ISTR_WKUP)</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wIstr<sp/>&amp;<sp/>ISTR_WKUP<sp/>&amp;<sp/>wInterrupt_Mask)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetISTR((u16)CLR_WKUP);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>usbResume(RESUME_EXTERNAL);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ISR_MSK<sp/>&amp;<sp/>ISTR_SUSP)</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wIstr<sp/>&amp;<sp/>ISTR_SUSP<sp/>&amp;<sp/>wInterrupt_Mask)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>if<sp/>SUSPEND<sp/>is<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(F_SUSPEND_ENABLED)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usbSuspend();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>not<sp/>possible<sp/>then<sp/>resume<sp/>after<sp/>xx<sp/>ms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usbResume(RESUME_LATER);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>of<sp/>the<sp/>ISTR<sp/>bit<sp/>must<sp/>be<sp/>done<sp/>after<sp/>setting<sp/>of<sp/>CNTR_FSUSP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetISTR((u16)CLR_SUSP);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ISR_MSK<sp/>&amp;<sp/>ISTR_SOF)</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wIstr<sp/>&amp;<sp/>ISTR_SOF<sp/>&amp;<sp/>wInterrupt_Mask)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetISTR((u16)CLR_SOF);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>bIntPackSOF++;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ISR_MSK<sp/>&amp;<sp/>ISTR_ESOF)</highlight></codeline>
<codeline lineno="304"><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wIstr<sp/>&amp;<sp/>ISTR_ESOF<sp/>&amp;<sp/>wInterrupt_Mask)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetISTR((u16)CLR_ESOF);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>resume<sp/>handling<sp/>timing<sp/>is<sp/>made<sp/>with<sp/>ESOFs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>usbResume(RESUME_ESOF);<sp/></highlight><highlight class="comment">/*<sp/>request<sp/>without<sp/>change<sp/>of<sp/>the<sp/>machine<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="310"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(ISR_MSK<sp/>&amp;<sp/>ISTR_CTR)</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wIstr<sp/>&amp;<sp/>ISTR_CTR<sp/>&amp;<sp/>wInterrupt_Mask)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>servicing<sp/>of<sp/>the<sp/>endpoint<sp/>correct<sp/>transfer<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>of<sp/>the<sp/>CTR<sp/>flag<sp/>into<sp/>the<sp/>sub<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>CTR_LP();<sp/></highlight><highlight class="comment">/*<sp/>low<sp/>priority<sp/>ISR<sp/>defined<sp/>in<sp/>the<sp/>usb<sp/>core<sp/>lib<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usbWaitReset(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="delay_8h_1ab6a09ce7e805fd3c213ba6d2d5921a59" kindref="member" tooltip="Delay the given number of microseconds.">delay_us</ref>(RESET_DELAY);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>systemHardReset();</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>low-level<sp/>send<sp/>bytes<sp/>function<sp/>is<sp/>NON-BLOCKING;<sp/>blocking<sp/>behavior,<sp/>with</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>a<sp/>timeout,<sp/>is<sp/>implemented<sp/>in<sp/>usercode<sp/>(or<sp/>in<sp/>the<sp/>Wirish<sp/>C++<sp/>high<sp/>level</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>implementation).</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>will<sp/>quickly<sp/>copy<sp/>up<sp/>to<sp/>64<sp/>bytes<sp/>of<sp/>data<sp/>(out<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>arbitrarily<sp/>large<sp/>buffer)<sp/>into<sp/>the<sp/>USB<sp/>peripheral<sp/>TX<sp/>buffer<sp/>and<sp/>return<sp/>the</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>number<sp/>placed<sp/>in<sp/>that<sp/>buffer.<sp/>It<sp/>is<sp/>up<sp/>to<sp/>usercode<sp/>to<sp/>divide<sp/>larger<sp/>packets</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>into<sp/>64-byte<sp/>chunks<sp/>to<sp/>guarantee<sp/>delivery.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usbBlockingSendByte(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(countTx);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>UserToPMABufferCopy((uint8*)&amp;ch,VCOM_TX_ADDR,1);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetEPTxCount(VCOM_TX_ENDP,1);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetEPTxValid(VCOM_TX_ENDP);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>countTx<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(countTx);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">uint32<sp/>usbSendBytes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8*<sp/>sendBuf,<sp/>uint32<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Last<sp/>transmission<sp/>hasn&apos;t<sp/>finished,<sp/>abort<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(countTx)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>only<sp/>put<sp/>VCOM_TX_EPSIZE<sp/>bytes<sp/>in<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>VCOM_TX_EPSIZE<sp/>/<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>VCOM_TX_EPSIZE<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>load<sp/>some<sp/>bytes<sp/>if<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>UserToPMABufferCopy(sendBuf,<sp/>VCOM_TX_ADDR,<sp/>len);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetEPTxCount(VCOM_TX_ENDP,<sp/>len);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>countTx<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>_SetEPTxValid(VCOM_TX_ENDP);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>available<sp/>bytes<sp/>are<sp/>in<sp/>the<sp/>recv<sp/>FIFO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">uint32<sp/>usbBytesAvailable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newBytes;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>copies<sp/>len<sp/>bytes<sp/>from<sp/>the<sp/>local<sp/>recieve<sp/>FIFO<sp/>(not</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/><sp/>usb<sp/>packet<sp/>buffer)<sp/>into<sp/>recvBuf<sp/>and<sp/>deq&apos;s<sp/>the<sp/>fifo.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/>will<sp/>only<sp/>copy<sp/>the<sp/>minimum<sp/>of<sp/>len<sp/>or<sp/>the<sp/>available</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/>bytes.<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>copied<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">uint32<sp/>usbReceiveBytes(uint8*<sp/>recvBuf,<sp/>uint32<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>newBytes)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>newBytes;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;i&lt;len;i++)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>recvBuf[i]<sp/>=<sp/>(uint8)(vcomBufferRx[i+offset]);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>newBytes<sp/>-=<sp/>len;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>offset<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>re-enable<sp/>the<sp/>rx<sp/>endpoint<sp/>which<sp/>we<sp/>had<sp/>set<sp/>to<sp/>receive<sp/>0<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newBytes<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>SetEPRxCount(VCOM_RX_ENDP,VCOM_RX_EPSIZE);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>SetEPRxStatus(VCOM_RX_ENDP,EP_RX_VALID);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>usbSendHello(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>uint8<sp/>bufin<sp/>=<sp/>48<sp/>+<sp/>recvBufIn;;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>uint8<sp/>bufout<sp/>=<sp/>48<sp/>+<sp/>recvBufOut;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>uint8<sp/>avail<sp/><sp/>=<sp/>48<sp/>+<sp/>usbBytesAvailable();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(usbSendBytes(&amp;bufin,1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(usbSendBytes(&amp;bufout,1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(usbSendBytes(&amp;avail,1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(usbSendBytes((uint8*)line,2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>uint8<sp/>recv[64];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>usbReceiveBytes(&amp;recv[0],1);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">uint8<sp/>usbGetDTR()<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((line_dtr_rts<sp/>&amp;<sp/>CONTROL_LINE_DTR)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">uint8<sp/>usbGetRTS()<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((line_dtr_rts<sp/>&amp;<sp/>CONTROL_LINE_RTS)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">uint8<sp/>usbIsConfigured()<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bDeviceState<sp/>==<sp/>CONFIGURED);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">uint8<sp/>usbIsConnected()<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bDeviceState<sp/>!=<sp/>UNCONNECTED);</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">uint16<sp/>usbGetPending()<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>countTx;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mbolivar/leaf/libmaple/libmaple/usb/usb.c"/>
  </compounddef>
</doxygen>
