<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__cr_q_u_e_u_e___r_e_c_e_i_v_e___f_r_o_m___i_s_r" kind="group">
    <compoundname>crQUEUE_RECEIVE_FROM_ISR</compoundname>
    <title>crQUEUE_RECEIVE_FROM_ISR</title>
    <briefdescription>
<para>croutine. </para>    </briefdescription>
    <detaileddescription>
<para>h <preformatted>
  crQUEUE_SEND_FROM_ISR(
                            xQueueHandle pxQueue,
                            void *pvBuffer,
                            portBASE_TYPE * pxCoRoutineWoken
                       )</preformatted></para><para>The macro&apos;s crQUEUE_SEND_FROM_ISR() and crQUEUE_RECEIVE_FROM_ISR() are the co-routine equivalent to the xQueueSendFromISR() and xQueueReceiveFromISR() functions used by tasks.</para><para>crQUEUE_SEND_FROM_ISR() and crQUEUE_RECEIVE_FROM_ISR() can only be used to pass data between a co-routine and and ISR, whereas xQueueSendFromISR() and xQueueReceiveFromISR() can only be used to pass data between a task and and ISR.</para><para>crQUEUE_RECEIVE_FROM_ISR can only be called from an ISR to receive data from a queue that is being used from within a co-routine (a co-routine posted to the queue).</para><para>See the co-routine section of the WEB documentation for information on passing data between tasks and co-routines and between ISR&apos;s and co-routines.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xQueue</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the queue on which the item is to be posted.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pvBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a buffer into which the received item will be placed. The size of the items the queue will hold was defined when the queue was created, so this many bytes will be copied from the queue into pvBuffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxCoRoutineWoken</parametername>
</parameternamelist>
<parameterdescription>
<para>A co-routine may be blocked waiting for space to become available on the queue. If crQUEUE_RECEIVE_FROM_ISR causes such a co-routine to unblock *pxCoRoutineWoken will get set to pdTRUE, otherwise *pxCoRoutineWoken will remain unchanged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pdTRUE an item was successfully received from the queue, otherwise pdFALSE.</para></simplesect>
Example usage: <preformatted>
A co-routine that posts a character to a queue then blocks for a fixed
period.  The character is incremented each time.
 static void vSendingCoRoutine( xCoRoutineHandle xHandle, unsigned portBASE_TYPE uxIndex )
 {
cChar holds its value while this co-routine is blocked and must therefore
be declared static.
 static char cCharToTx = &apos;a&apos;;
 portBASE_TYPE xResult;</preformatted></para><para><preformatted>All co-routines must start with a call to crSTART().
     crSTART( xHandle );</preformatted></para><para><preformatted>     for( ;; )
     {
Send the next character to the queue.
         crQUEUE_SEND( xHandle, xCoRoutineQueue, &amp;cCharToTx, NO_DELAY, &amp;xResult );</preformatted></para><para><preformatted>         if( xResult == pdPASS )
         {
The character was successfully posted to the queue.
         }
		 else
		 {
Could not post the character to the queue.
		 }</preformatted></para><para><preformatted>Enable the UART Tx interrupt to cause an interrupt in this
hypothetical UART.  The interrupt will obtain the character
from the queue and send it.
		 ENABLE_RX_INTERRUPT();</preformatted></para><para><preformatted>Increment to the next character then block for a fixed period.
cCharToTx will maintain its value across the delay as it is
declared static.
		 cCharToTx++;
		 if( cCharToTx &gt; &apos;x&apos; )
		 {
			cCharToTx = &apos;a&apos;;
		 }
		 crDELAY( 100 );
     }</preformatted></para><para><preformatted>All co-routines must end with a call to crEND().
     crEND();
 }</preformatted></para><para><preformatted>An ISR that uses a queue to receive characters to send on a UART.
 void vUART_ISR( void )
 {
 char cCharToTx;
 portBASE_TYPE xCRWokenByPost = pdFALSE;</preformatted></para><para><preformatted>     while( UART_TX_REG_EMPTY() )
     {
Are there any characters in the queue waiting to be sent?
xCRWokenByPost will automatically be set to pdTRUE if a co-routine
is woken by the post - ensuring that only a single co-routine is
woken no matter how many times we go around this loop.
         if( crQUEUE_RECEIVE_FROM_ISR( pxQueue, &amp;cCharToTx, &amp;xCRWokenByPost ) )
		 {
			 SEND_CHARACTER( cCharToTx );
		 }
     }
 }</preformatted> </para>    </detaileddescription>
  </compounddef>
</doxygen>
