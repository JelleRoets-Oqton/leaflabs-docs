<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="dac_8c" kind="file">
    <compoundname>dac.c</compoundname>
    <includes refid="libmaple_8h" local="yes">libmaple.h</includes>
    <includes refid="gpio_8h" local="yes">gpio.h</includes>
    <includes refid="dac_8h" local="yes">dac.h</includes>
    <incdepgraph>
      <node id="77">
        <label>libmaple/dac.c</label>
        <link refid="dac.c"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>dac.h</label>
        <link refid="dac_8h"/>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>rcc.h</label>
        <link refid="rcc_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>stm32.h</label>
        <link refid="stm32_8h"/>
      </node>
      <node id="79">
        <label>libmaple_types.h</label>
        <link refid="libmaple__types_8h"/>
      </node>
      <node id="78">
        <label>libmaple.h</label>
        <link refid="libmaple_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>gpio.h</label>
        <link refid="gpio_8h"/>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>delay.h</label>
        <link refid="delay_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dac_8c_1aa3f18fed6d040b09777d3be872a3b78d" prot="public" static="no" mutable="no">
        <type><ref refid="structdac__dev" kindref="compound">dac_dev</ref></type>
        <definition>dac_dev dac</definition>
        <argsstring></argsstring>
        <name>dac</name>
        <initializer> {
    .regs = <ref refid="dac_8h_1ad18d0b914c7f68cecbee1a2d23a67d38" kindref="member">DAC_BASE</ref>,
}</initializer>
        <briefdescription>
<para>DAC peripheral routines. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/dac.c" line="39" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/dac.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dac_8c_1aa227422b75a45a15b44c9cbee79a0e6c" prot="public" static="no" mutable="no">
        <type>const <ref refid="structdac__dev" kindref="compound">dac_dev</ref> *</type>
        <definition>const dac_dev* DAC</definition>
        <argsstring></argsstring>
        <name>DAC</name>
        <initializer> &amp;dac</initializer>
        <briefdescription>
<para>DAC device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/dac.c" line="41" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/dac.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dac_8c_1af9d329fed42fffde322facaab977b09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dac_init</definition>
        <argsstring>(const dac_dev *dev, uint32 flags)</argsstring>
        <name>dac_init</name>
        <param>
          <type>const <ref refid="structdac__dev" kindref="compound">dac_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint32</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Initialize the digital to analog converter. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags: DAC_CH1: Enable channel 1 DAC_CH2: Enable channel 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Side Effects:</title><para>May set PA4 or PA5 to INPUT_ANALOG </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/dac.c" line="51" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/dac.c" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="dac_8c_1a1e03ac534db95f777ab100d2fb3303c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dac_write_channel</definition>
        <argsstring>(const dac_dev *dev, uint8 channel, uint16 val)</argsstring>
        <name>dac_write_channel</name>
        <param>
          <type>const <ref refid="structdac__dev" kindref="compound">dac_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint16</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Write a 12-bit value to the DAC to output. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>channel to select (1 or 2) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>value to write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/dac.c" line="71" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/dac.c" bodystart="71" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="dac_8c_1a807ecc828b5121b59563e9adbfb4f442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dac_enable_channel</definition>
        <argsstring>(const dac_dev *dev, uint8 channel)</argsstring>
        <name>dac_enable_channel</name>
        <param>
          <type>const <ref refid="structdac__dev" kindref="compound">dac_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Enable a DAC channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>channel to enable, either 1 or 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Side Effects:</title><para>May change pin mode of PA4 or PA5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/dac.c" line="88" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/dac.c" bodystart="88" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="dac_8c_1a92e17c192a2302de1e832e0f3173bfc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dac_disable_channel</definition>
        <argsstring>(const dac_dev *dev, uint8 channel)</argsstring>
        <name>dac_disable_channel</name>
        <param>
          <type>const <ref refid="structdac__dev" kindref="compound">dac_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint8</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Disable a DAC channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>channel to disable, either 1 or 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mbolivar/leaf/libmaple/libmaple/dac.c" line="110" bodyfile="/home/mbolivar/leaf/libmaple/libmaple/dac.c" bodystart="110" bodyend="119"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010<sp/>Bryan<sp/>Newbold.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libmaple_8h" kindref="compound" tooltip="General include file for libmaple.">libmaple.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gpio_8h" kindref="compound" tooltip="General purpose I/O (GPIO) and Alternate Function I/O (AFIO) prototypes, defines, and inlined access ...">gpio.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dac_8h" kindref="compound" tooltip="Digital to analog converter header file.">dac.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STM32_HIGH_DENSITY</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="structdac__dev" kindref="compound" tooltip="DAC device type.">dac_dev</ref><sp/>dac<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>.<ref refid="structdac__dev_1a8bf2291eb825bf089fdfe032c1551639" kindref="member" tooltip="Register map.">regs</ref><sp/>=<sp/><ref refid="dac_8h_1ad18d0b914c7f68cecbee1a2d23a67d38" kindref="member" tooltip="DAC register map base address.">DAC_BASE</ref>,</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41" refid="dac_8h_1aa227422b75a45a15b44c9cbee79a0e6c" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdac__dev" kindref="compound" tooltip="DAC device type.">dac_dev</ref><sp/>*DAC<sp/>=<sp/>&amp;dac;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="dac_8h_1af9d329fed42fffde322facaab977b09f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dac_init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdac__dev" kindref="compound" tooltip="DAC device type.">dac_dev</ref><sp/>*dev,<sp/>uint32<sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>turn<sp/>on<sp/>the<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>rcc_clk_enable(RCC_DAC);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>rcc_reset_dev(RCC_DAC);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>DAC_CH1)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dac_enable_channel(dev,<sp/>1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>DAC_CH2)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dac_enable_channel(dev,<sp/>2);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="dac_8h_1a1e03ac534db95f777ab100d2fb3303c4" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dac_write_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdac__dev" kindref="compound" tooltip="DAC device type.">dac_dev</ref><sp/>*dev,<sp/>uint8<sp/>channel,<sp/>uint16<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(channel)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structdac__dev_1a8bf2291eb825bf089fdfe032c1551639" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structdac__reg__map_1a9f480b2a138605706277fd8a81d6369a" kindref="member" tooltip="Channel 1 12-bit right-aligned data holding register.">DHR12R1</ref><sp/>=<sp/>DAC_DHR12R1_DACC1DHR<sp/>&amp;<sp/>val;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structdac__dev_1a8bf2291eb825bf089fdfe032c1551639" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structdac__reg__map_1a7e8213488db030bb17fca9360ad272bb" kindref="member" tooltip="Channel 2 12-bit right-aligned data holding register.">DHR12R2</ref><sp/>=<sp/>DAC_DHR12R2_DACC2DHR<sp/>&amp;<sp/>val;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="dac_8h_1a807ecc828b5121b59563e9adbfb4f442" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dac_enable_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdac__dev" kindref="compound" tooltip="DAC device type.">dac_dev</ref><sp/>*dev,<sp/>uint8<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>ANALOG<sp/>mode<sp/>on<sp/>PA4<sp/>and<sp/>PA5.<sp/>This<sp/>mapping<sp/>is<sp/>consistent<sp/>across</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>STM32<sp/>chips<sp/>with<sp/>a<sp/>DAC.<sp/>See<sp/>RM0008<sp/>12.2.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(channel)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio_set_mode(GPIOA,<sp/>4,<sp/><ref refid="gpio_8h_1a3bb60796972f15de31c709442d82c7eaa6714bbb77b125a50bb13e2ef1742c4ec" kindref="member" tooltip="Analog input.">GPIO_INPUT_ANALOG</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structdac__dev_1a8bf2291eb825bf089fdfe032c1551639" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structdac__reg__map_1a95e25a46456804f6b9934aa8bb527d4b" kindref="member" tooltip="Control register.">CR</ref><sp/>|=<sp/>DAC_CR_EN1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpio_set_mode(GPIOA,<sp/>5,<sp/><ref refid="gpio_8h_1a3bb60796972f15de31c709442d82c7eaa6714bbb77b125a50bb13e2ef1742c4ec" kindref="member" tooltip="Analog input.">GPIO_INPUT_ANALOG</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structdac__dev_1a8bf2291eb825bf089fdfe032c1551639" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structdac__reg__map_1a95e25a46456804f6b9934aa8bb527d4b" kindref="member" tooltip="Control register.">CR</ref><sp/>|=<sp/>DAC_CR_EN2;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="dac_8h_1a92e17c192a2302de1e832e0f3173bfc8" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dac_disable_channel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdac__dev" kindref="compound" tooltip="DAC device type.">dac_dev</ref><sp/>*dev,<sp/>uint8<sp/>channel)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(channel)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structdac__dev_1a8bf2291eb825bf089fdfe032c1551639" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structdac__reg__map_1a95e25a46456804f6b9934aa8bb527d4b" kindref="member" tooltip="Control register.">CR</ref><sp/>&amp;=<sp/>~DAC_CR_EN1;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;<ref refid="structdac__dev_1a8bf2291eb825bf089fdfe032c1551639" kindref="member" tooltip="Register map.">regs</ref>-&gt;<ref refid="structdac__reg__map_1a95e25a46456804f6b9934aa8bb527d4b" kindref="member" tooltip="Control register.">CR</ref><sp/>&amp;=<sp/>~DAC_CR_EN2;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>STM32_HIGH_DENSITY<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/mbolivar/leaf/libmaple/libmaple/dac.c"/>
  </compounddef>
</doxygen>
